

//Declaration, Assignment, Reassignment

//Baby is born, Will be named later

var name; //declaration
name="Raj"; //assignment

// Baby born & named

var name="Simran" //assignment

Name changed later

name= "Preeti" // reassignment

var name="Kiran"; //redeclaration 



console.log(name);  //

console.log("The name is: ",name);




Assignments:
============


Identify which of the following is valid or invalid variable naming.


userName  
if        
_totalAmount 
123price    
$taxRate    
@username   
item123     
my-variable  







Datatypes in Java-script:
=========================


In JavaScript, there are several built-in data types:

Primitive Data Types:
---------------------


1. String: Textual data, enclosed within single or double quotes.
Example:

var name1= 'Raj';
var name2="Simran";

2. Number: Numeric data, including integers and floating-point numbers.

Example:

var age= 22;
var height = 5.8;


3. Boolean: Logical data representing true or false.

Example:

var isPass = true;
var isMarried = false;



4. Undefined: Represents a variable that has been declared but not yet assigned a value.

Example:

var address; // address is undefined



5. Null: Represents the intentional absence of any object value. It is an object type itself, though it represents "nothing."

Example:

var salary = null; // salary is explicitly empty





7. BigInt: Introduced in ES10, BigInts are used for working with arbitrarily large integers.





Non-primitive Data Type:

1. Object: A collection of key-value pairs, where keys (properties) can point to values (including other objects or functions).

Example:

let person = {
  name: "John",
  age: 30
};




2. Array: A special type of object that represents an ordered list of values, which can be accessed by their index.

Example:

var fruits = ['apple', 'banana', 'cherry'];



3. Function: A reusable block of code designed to perform a particular task. Functions are also objects in JavaScript.

Example:

function greet() {
  console.log('Hello!');
}




primitive:
----------
1. String
2. Number
3. Boolean
4. undefined
5. null
6. bigInt

Non-primitives: all non-primitive types are implicitly treated as object in JavaScript.

1. object: {}
2. array: []
3. function: 


Note: Non-primitive types are also called as reference type.



//primitive - it directly points to value -> by value
//non-primitve - it points to adress( location ) -> by reference
â€‹

Example: by value


var x = 10;

var y=x;

x=20;

console.log(x);

console.log(y);


Example: by reference


var arr1 = ["apple", "mango"];

var arr2= arr1;

arr1.push("Banana");

console.log(arr1);
console.log(arr2);







Checking Data Types of a variable: interrogating the type of a variable in java-script: by using typeof() inbuilt operator.
=================================


var x = 12;
console.log(typeof(x)); // Output: number

var y = "12";
console.log(typeof(y)); // Output: string


var isMarried = false;
console.log(typeof(isMarried)); // Output: boolean


var age;

console.log(typeof(age)); // Output: undefined

var salary= null;  //imp

console.log(typeof(salary)); // Output: object


var fruits = ["apple", "Banana","Mango"];

console.log(typeof(fruits)); // Output: object


var emp = {

    id: 101,
    name: "Ram",
    address: "Panjab"
};

console.log(typeof(emp)); // Output: object


function greet(){  //imp
    console.log("Welcome to Chitkara");
}

console.log(typeof(greet)); // Output: function



Note: JavaScript is a loosely typed language, meaning you don't have to declare the data type of a variable explicitly, and it can change types dynamically.
Variables: Best Naming practices


Example:

var x= "Hello";

console.log(typeof(x)); //string

x=20;


console.log(typeof(x)); //number

x=true;


console.log(typeof(x)); //boolean




printing in a descriptive manner: Output
=================================
 
var age= 30;

option1:
-------
console.log("The age is",age);


option2:
--------
console.log("The age is "+age);


option3:
-------

var message = "The age is "+age;
console.log(message);


option4: using String template (multi-line string)
--------
var name= "Raj";
var message = `The age is ${age}
and name is ${name}`;

console.log(message);



Differentiate between ,(coma) and +
====================================

var a = 2;
var b = 3;
var c = "hello";

console.log(a,b,c);  
console.log(a+b+c);  

var x= a+b+c;

console.log(x); //5hello
console.log(typeof(x)); //string


// Case 2: Integers
var a = 2;
var b = 3;
console.log(a+b);   // 5
console.log(a,b);   // 2 3

var x= a+b;

console.log(x); //5
console.log(typeof(x)); //number




// Case 3: Strings
var a = "Hello";
var b = "World";

console.log(a+b); // HelloWorld

// Case 4: Integer with Strings
var a = 2;
var b = "hello";

console.log(a,b); // 2 hello
console.log(a+b); // 2hello

// Case 5: "\n"
var a = 2;
var b = "hello";

console.log(a,"\n",b);








Operators in JavaScript:
========================

1. Arithmetic Operators:
------------------------

Addition: +
Subtraction: -
Multiplication: *
Division: /
Modulus (Remainder): %
Increment: ++
Decrement: --
exponent: **

2. Assignment Operators:
------------------------

Assign: =
Addition assignment: +=
Subtraction assignment: -=
Multiplication assignment: *=
Division assignment: /=
Modulus assignment: %=

3. Relational Operators:
------------------------


Equal to: == or ===
Not equal to: != or !==
Greater than: >
Greater than or equal to: >=
Less than: <
Less than or equal to: <=

4. Logical Operators:
---------------------

Logical AND: &&
Logical OR: ||
Logical NOT: !

5.Conditional (Ternary) Operator:
---------------------------------

condition ? expression1 : expression2







Note: + operator will also works for string concatenation.(if any one operand is string then it will do the concatenation)


example1:

var x= 10;
var y = 20;

console.log(x+y); //30

example2:

var x= 10;
var y = "masai";

console.log(x+y); //10masai

example3:

var x= 10;
var y = "10";

var z= x+y;

console.log(z); //1010
console.log(typeof(z)); //string



example4:

console.log(10+10+"masai"); 

console.log("masai"+10+10); 

console.log("masai"+(10+10)); 



Extra tips: using the + operator
===========


String + Anything: Results in string concatenation.
Number + Boolean: Coerces booleans to numbers, then performs numeric addition.
Null + Number: Coerces null to 0 and performs numeric addition.
Undefined + Number: Results in NaN (Not a Number).
Array + Array: Result in String(both array will be joined as a string)
Object + Object: Result in String (objects are converted to "[object Object]") 







Arithmetic operator precedence:
===============================





1. ()

2. ** exponent

3. * / % same precedence.. left to right

4. + - same precedence.. left to right


example:


var x = 3 + 2 - 1 * 3**2 /2;

3+2-1*9/2

3+2-9/2
3+2-4.5

5-4.5 = 0.5





console.log(x); 



Amazon shopping cart example:
----------------------------- 


var quantityOfEarPhone= 2;
var priceOfEarPhone= 1599;

var quantityOfBook=4;
var priceOfBook = 449;

var quantityOfPhone= 2;
var priceOfPhone = 17000;

var totalPrice = (quantityOfEarPhone * priceOfEarPhone) + (quantityOfBook * priceOfBook ) + (quantityOfPhone * priceOfPhone);

console.log("Total Price is :", totalPrice);



% reminder operator:

50 % 7 = 1

7 % 50 = 7




exponent operator: **

 2
3     3*3 = 3**2 = 9

 4 
5    5*5*5*5 = 5**4 = 625

--using this exponent operator we can find out the square root also:

 _    1/2     0.5 
|4   4     = 4       4**0.5



--applying brackets for long expressions

use "\n" break line: 

example:

var city = "Chandigarh";
var state = "Punjab";
var country = "India";

console.log("City is: "+city+"\nstate is: "+state+"\ncountry is: "+country); 

//or using backtick

console.log(
`City is: ${city}
State is: ${state}
Country is: ${country}`
);




--boolean type:

var x="true"; 

var y= true;


console.log(typeof(x)); //string

console.log(typeof(y)); //boolean


memory management and interpreter:

var a=2;
var b=4;
var c= a+b;
console.log(c);

var d = c;
d= d+ a+b;
console.log(d);



Assignment Operators:
------------------------

Assign: =
Addition assignment: +=

example1:

var x;
x=20;

console.log(x); //20


example2:

var x = 20;

x+=30;

console.log(x); //50



3. Relational Operators:
------------------------
--these are applied to any types of values/variables and the result will always be in the form of Boolean.

==

true: if first value is equal to second value
false: if the first value is not equal to second value


Equal to: == or ===(strict equal to)
Not equal to: != or !==(string not equal to)


Greater than: >
Greater than or equal to: >=
Less than: <
Less than or equal to: <=

example:

console.log("dinesh" == "dinesh"); 
console.log(2 == 2); 
console.log("2" == "2");  
console.log("dinesh" == "Dinesh");  

!= (it is the opposite of ==)

true: when value is not equal
false: when the value is equal

console.log("dinesh" != "dinesh"); 
console.log(2 != 2); 
console.log("2" != "2");  
console.log("dinesh" != "Dinesh"); 

=== //strict equal to

2 == "2" true 
2 === "2" false

== compare the value not the datatype
=== compare the value + datatype

!== opposit of ===

!= consider the value
!== consider the value and the datatype

example:


var masai = 5;
var a = "masai";
var b = masai;

console.log(a == b); //false
console.log(a != b); //true
console.log(a === b);  //false
console.log(a !== b);  //true




> gt (first value is strictly gt second value) and false: if the second value is less than or equal to first value
< lt
>= gte
<= lte



console.log(5 > 4) true

example:

console.log(15 > 14) true
console.log(15 > 15) false
console.log(15 > 16) false

var ageOfRam= 20;
var ageOfShyam = 30;

console.log(ageOfRam > ageOfShyam); // kya ram bara hain? false
console.log(ageOfRam < ageOfShyam); // kya ram chota hain? true

example2: 

var ramMarks= 36;
var passingMarks = 35;

var isPass = ramMarks > passingMarks;  

console.log(isPass);

--it is wrong code: becoz if ramMarks = 35 then ?


var isPass = ramMarks > passingMarks;  //false ..so here we need to make use of >=

>= gte:  true: if first value is gt or equal to the second value and, false: if the first value is less than second value.


--amazon discount for 10% if the purchage is more than 4000;

var minimumPurchage = 4000;
var rahulPurchage = 5000;

var isEligibleForDisount = rahulPurchage >= minimumPurchage;

console.log(isEligibleForDisount);


example 3: eligible for vote:

var legelAge = 18;
var amitAge = 17;

var isEligibleForVote = amitAge >= legalAge;


console.log(isEligibleForVote);

example:

Swaping 2 number without taking 3rd variable:

var a = 5;
var b = 10;

console.log("Before swapping a and b is ",a,b);

a = a + b;
b = a - b;
a = a - b;

console.log("Before swapping a and b is ",a,b);




JavaScript Type Conversion (Type Coercion):
===========================================

--In JavaScript, type conversion (or type coercion) is the automatic or explicit conversion of values from one data type to another. JavaScript is a loosely typed language, which means that it performs automatic conversions between types based on the context.

There are two types of type conversions in JavaScript:

1. Implicit Conversion (Automatic Coercion)
2. Explicit Conversion (Manual Coercion)


1. Implicit Type Conversion (Coercion):

--JavaScript automatically converts one data type to another when necessary. This usually happens when using operators like +, comparison operators like ==, or in conditional contexts.


String Conversion:
-------------------
If one operand is a string and the other is not, JavaScript will convert the non-string operand into a string, and then perform string concatenation.

Example:

var result = "The number is " + 5;
console.log(result);  // Output: "The number is 5"

Here, the number 5 is converted to the string "5" and concatenated with the other string.


Numeric Conversion:
---------------------

When using arithmetic operators (-, *, /) or relational operators (>, <), JavaScript will try to convert the operands into numbers.

Example:

var result = "10" - 2;  // "10" is converted to the number 10
console.log(result);     // Output: 8

var result2 = "apple" - 2;  // "apple" can't be converted to a number
console.log(result2);       // Output: NaN (Not a Number)


Boolean Conversion:
-------------------

In contexts where a boolean is expected (like if conditions), JavaScript will coerce the value into a boolean. The following values are considered falsy (they convert to false):

0
"" (empty string)
null
undefined


Example1: 


console.log(true+true); 

console.log(5+true); 




Example2:

if(0){
    console.log("hello");
}
else{
    console.log("hi");
}




2. Explicit Type Conversion (Manual Coercion):

--You can explicitly convert values to different types using JavaScriptâ€™s built-in functions. This is useful when you want precise control over type conversion.



Convert to String:
------------------

You can convert any value to a string using the String() function or by concatenating the value with an empty string (+ "").

Example:

let num = 123;
let str = String(num);   // Converts number to string "123"
console.log(str);        // Output: "123"

let bool = true;
let boolStr = String(bool);   // Converts boolean to string "true"
console.log(boolStr);         // Output: "true"


var x=[10,20,30]+"";
console.log(typeof x);


Convert to Number:
------------------

You can convert values to numbers using the Number() function, or by using unary operators like + or -.

var str = "123";
var num = Number(str);    // Converts string to number 123
console.log(num);         // Output: 123

var bool = true;
var boolNum = Number(bool);   // true is converted to 1
console.log(boolNum);         // Output: 1

var result = +"456";    // Using unary + or - to convert string to number
console.log(result);    // Output: 456


Tips:

- true becomes 1 and false becomes 0.
- null becomes 0, but undefined becomes NaN (Not a Number).




parseInt() function.
--------------------

--This function is also used to convert an string to a number(Whole number)

--It will truncate the decimal point number.

Example:

console..log(parseInt("100")+10);

console..log(parseInt("100sfdf")+10);

console..log(parseInt("sdfd100")+10);





conditional statement:
=====================

1. if
2. if-else
3. if..else-if...else (if-else ladder)
4. nested if-else


var x= 10;
var y= 20;



	x == y
           |
  ---------------------
  |		      |
true		     false


example1:

var result = 5 > 4;

if(result)
{
console.log("5 is greater");
}



example2:

console.log("code starts");

if(true)
{
	console.log("I am inside");
}

console.log("code end");


example3:

console.log("code starts");

var name1="ram";
var name2="shyam";


if(name1 === name2)
{
	console.log("Both names are equal");
}

console.log("code end");


if-else:
---------

example3:

console.log("code starts");

var name1="ram";
var name2="shyam";


if(name1 === name2)
{
	console.log("Both names are equal");
}
else
{
	console.log("Both names are not equal");
}


console.log("code end");


example4:

checking a number is divisible by 3 or not:

var num = 15;

if(num % 3 == 0)
{
	console.log("Number is divisible by 3");
}
else
{
	console.log("Number is not divisible by 3");
}


example5: checking a given number is odd or even:

var num = 21;

if(num % 2 === 0)
{
	console.log("Number is even");
}
else
{
	console.log("Number is odd");
}


Example: 


var marks = 500;

if(marks > 600)
{
	console.log("First Div");
}
else
{
	console.log("Second Div");
}

// another way

var result = "First Div";

if(marks <= 600)
{
	result = "Second Div";
}

console.log(result);

//another way

var result = (marks > 600) ? "First Div" : "Second Div";

console.log(result);











Example: 

getting the last digit of any number:

var num = 4654;

var lastDigit = num % 10;

console.log("last digit is: ",lastDigit);




if..else-if..else:
------------------


Example1: find out a number is positive or negative or zero ?


var num = -5;

if(num > 0){
	console.log("Positive number");
}
else if(num < 0){
console.log("Negetive number");
}
else{
	console.log("Number is zero");
}


Example2: Compare two numbers:


var num1= 10;

var num2= 20;

if(num1 > num2){
	console.log("Num1 is greater");
}
else if(num1 < num2){
	console.log("Num2 is greater");
}
else{
console.log("Both are equal");
}



Assignment:

var num = 10;

if num value is divisible by 5 then print "Hello"  // 10
if num value is divisible by 3 then print "Welcome" // 9 
if num value is divisible by 5 and 3 then print "Hello Welcome"  // 15,30
if num value is not divisible by 5 and 3 then print "invalid number" //2,11


var num = 10;

if(num % 5 == 0)
{
	console.log("Hello");
}
else if(num % 3 == 0)
{
	console.log("Welcome");
}
else if(num % 5 == 0 && num % 3 == 0)
{
	console.log("Hello Welcome");
}
else
{
	console.log("Invalid number");
}


**The above code is not correct, the correct code will be as follows:


var num = 10;

if(num % 5 == 0 && num % 3 == 0)
{
	console.log("Hello Welcome");
}
else if(num % 5 == 0)
{
	console.log("Hello");
}
else if(num % 3 == 0)
{
	console.log("Welcome");
}
else
{
	console.log("Invalid number");
}








Bill and discount:

if total_bill is greater than or equal 1000 : 20% discount
if total_bill is greater than or equal 500 : 10% discount
 


var total_bill = 1500;

if(total_bill >= 500)
{
console.log("10% discount");
}
else if(total_bill >= 1000)
{
console.log("20% discount");
}
else
{
console.log("No discount");
}



**Note: Conditions should be checked from the most specific (highest value) to the most general (lowest value). 



diff bt if..if..if and if..else-if..else
------------------------------------------


using if..else-if..else
------------------------

example1: poor family: only one thing



var rice_available = true;
var wheat_available = true;
var apple_available = true;



if(rice_available)
{
	console.log("Buy Rice");
}

else if(wheat_available)
{
	console.log("Buy Wheat");
}

else if(apple_available)
{
	console.log("Buy Apple");
}
else
{
	console.log("Nothing is available");
}




--Here only one option will be selected 





using if..if..if
------------------------

example1: rich family: multiple things




var rice_available = true;
var wheat_available = true;
var apple_available = true;

if(rice_available)
{
console.log("Buy Rice");
}

if(wheat_available)
{
console.log("Buy Wheat");
}

if(apple_available)
{
console.log("Buy Apple");
}



--here multiple options will be selected.



nested if-else:  (condition inside the condition)
===============

var gender = "male";
var age = 18;

if(gender === "male")
{

	if(age >= 21)
	{
		console.log("male can marry");
	}
	else
	{
		console.log("male can't marry");
	}	

}
else if(gender === "female")
{

	if(age >= 18)
	{
		console.log("female can marry");
	}
	else
	{
		console.log("female can't marry");
	}	

}
else
{

console.log("Invalid gender...");

}






login example:
---------------

var storedUsername="ram@gmail.com";
var storedPassword = "12345";

var inputUsername="ram@gmail.com";
var inputPassword = "123";


if(inputUsername === storedUsername)
{

	if(inputPassword === storedPassword)
	{
		console.log("Welcome User");
	}
	else
	{

		console.log("Invalid password..");
	}

}
else
{

console.log("Invalid email/username");

}



leap year: 
-----------

--it should be divisible by 4, and should not divisible by 100, and if divisible by 100 then it should be divisible by 400 also.


2004, 2008, 2012, 2016: are divisible by 4 so they are leap year.

1900, 2100, 2200: those are divisible by 100 but not divisible by 400 so they are not leap year.

1600, 2000, 2400: these are divisible by 100 as well as divisible by 400 also so they are leap year





approach1:
-----------

var year = 2024;

if (year % 4 === 0)
{
    if (year % 100 !== 0) 
     {
        console.log(year + " is a leap year");
     } 
     else 
      {
        	if (year % 400 === 0) 
		{
            		console.log(year + " is a leap year");
        	} 
		else 
		{
            		console.log(year + " is not a leap year");
        	}
    	}
} 

else 
{
    console.log(year + " is not a leap year");
}



approach2:
----------

var year = 2016;


if(year % 4 == 0)
{
	if(year % 100 == 0)
	{
		if(year % 400 == 0)
		{
			console.log("leap year");
		}
		else
		{
			console.log("Not a leap year");
		}

	}
	else
	{
		console.log("Leap year");
	}
}else
{
	console.log("Not a leap year");
}






Java Script logical operator:
=============================

--On the number datatype we can perform +, -, *, /, % operations

example:

2, 5, -8, 4, 6, -2, 7...

2 + 2 = 4;


--similarly on the boolean data types we can perform some operations with the help of logical operators.


1. Logical AND &&
2. Logical OR ||
3. Logical NOT !  





boolean data types values : true/false


Note: the logical operators works on the boolean values and the result of the logical operator will also be in the boolean value.






1.Logical AND &&
------------------

boolean isPanCardAvailable = true;
boolean isMarksSheetAvailable = true;


if(isPanCardAvailable && isMarksSheetAvailable)
{
	console.log("You will get the admission");
}
else
{
	console.log("You will not get the admission");
}


rule:

true && true = true

true && false = false

false && true = false

false && false = false



example:

console.log(true && true); // true
console.log(true && false); // false
console.log(false && true); // false
console.log(false && false); // false



--using this logical operator we can evaluate multiple expressions also.

example

if a student gets the marks in "eng" more than 60% and in "math" more than 70% and in "phy" more than 80% then he will get the bike.



eng > 60  math > 70   phy > 80

true	   true		true       ====> true

true	   true 	false       ====> false


example:


var a = 5 > 3; //true

var b = 6 > 4; //true

var c = a && b; // true

var d = (5 > 3) && (6 > 4);

console.log("Result is ",d);





combining nested if-else using logical operator:
================================================

example:

if(5 > 3)
{

	if(10 > 2)
	{
		console.log("welcome");
	}

}




--here "welcome" will be printed if both condition will be true..

so in this case we can combine both if condition in only one if condition with the help of logical && operator:

if(5 > 3 && 10 > 2)
{
	console.log("welcome");
}




 



solving the login problem: using nested if else
================================================

var storedUsername="ram@gmail.com";
var storedPassword = "12345";

var inputUsername="ram@gmail.com";
var inputPassword = "123";


if(inputUsername === storedUsername)
{

	if(inputPassword === storedPassword)
	{
		console.log("Welcome User");
	}
	else
	{

		console.log("Invalid password..");
	}

}
else
{
	console.log("Invalid email/username");
}



solving the same login problem: using logical AND operator
==========================================================


if(inputUsername === storedUsername && inputPassword === storedPassword){

	console.log("Welcome user");
}
else
{
	console.log("Invalid username or password");
}



solving the marriage problem with nested if-else
==================================================


var gender = "male";
var age = 25;


if(gender === "male")
{
	if(age >= 21)
	{
		console.log("Male can marry");
	}
	else
	{
		console.log("Male can not marray");
	}

}
else if(gender === "female")
{

	if(age >= 18){
		console.log("Female can marry");
	}
	else
	{
		console.log("Female can not marray");
	}


}
else
{
	console.log("Invalid gender");
}




solving the marriage problem with logical operator
==================================================

var gender = "male";
var age = 25;


if(gender === "male" && age >= 21)
{
	console.log("male can marry");
}
else if(gender === "female" && age >= 18)
{
	console.log("female can marry");
}
else
{
	console.log("Invalid gender or age.. can't marray");
}



OR || operator: it returns true if any one condition is true
================


boolean isPanCardAvailable = true;
boolean isMarksSheetAvailable = false;


if(isPanCardAvailable || isMarksSheetAvailable)
{
	console.log("You will get the admission");
}
else
{
	console.log("You will not get the admission");
}


rule:

true && true = true

true && false = true

false && true = true

false && false = false


example:

console.log(true && true); // true
console.log(true && false); // true
console.log(false && true); // true
console.log(false && false); // false


marrage problem using AND and OR:
================================


var gender = "male";
var age = 25;


if( (gender === "male" && age >= 21) || (gender === "female" && age >= 18))
{
	console.log(gender+" can marry");
}
else
{
	console.log("Invalid gender or age.. can't marray");
}



another way:
------------


var isMaleEligible = ((gender === "male") && (age >= 21));


var isFemaleEligible = (gender === "female" && age >= 18);


if(isMaleElegible || isFemaleEligible){

	console.log(gender+" can marry");

}
else
{
	console.log("Invalid gender or age.. can't marray");
}




leap year using logical operator:
=================================

if((year % 4 === 0 && year % 100 != 0) || (year % 400 === 0))
{

	console.log("it is a leap year");
} 
else
{
	console.log("it is not a leap year");
}


Not operator: negetion operator !:
=================================

if(!false)
{
	console.log("hello");
}
else
{
	console.log("hi");
}



Assignment1:
------------

Given any character, if it is a vowel print "Vowel" otherwise print not a vowel.


Assignment2: 
-------------

Given and character if it is a consonant print "Consonant" otherwise print not a consonant.


Assignment3: 
------------

Given 3 numbers print which is greatest.


Assignment4:
------------

Example: Given the year of birth, if the
  
  1. Age is between 13 and 19 (both included) print Teenage and
  2. Age in between 20 and 29 (both included) print Twenties
   otherwise print Adult.

Assignment5:
------------

Given a student age, find out wheater he is eligible for vote or not: using terinary operator.

Assignment6:
------------

Given a number, find out it is even or odd using terinary operator.







Assignment solution:
-------------------------

var num = 10;

if num value is divisible by 5 then print "Hello"  // 10
if num value is divisible by 3 then print "Welcome" // 9 
if num value is divisible by 5 and 3 then print "Hello Welcome"  // 15,30
if num value is not divisible by 5 and 3 then print "invalid number" //2,11


var num = 10;

if(num % 5 == 0)
{
	console.log("Hello");
}
else if(num % 3 == 0)
{
	console.log("Welcome");
}
else if(num % 5 == 0 && num % 3 == 0)
{
	console.log("Hello Welcome");
}
else
{
	console.log("Invalid number");
}


**The above code is not correct, the correct code will be as follows:


var num = 10;

if(num % 5 == 0 && num % 3 == 0)
{
	console.log("Hello Welcome");
}
else if(num % 5 == 0)
{
	console.log("Hello");
}
else if(num % 3 == 0)
{
	console.log("Welcome");
}
else
{
	console.log("Invalid number");
}








vowel-consonant solution:
=========================

approach 1:

var char = "e";

if( char == "a" || char=="e" || char=="i" || char=="o" || char=="u" )
{
  console.log("is a vowel");
}
else{
  console.log("It is a consonent");
}

approach2:

var char = "e";

if( !(char == "a" || char=="e" || char=="i" || char=="o" || char=="u") )
{
  console.log("is a consonant");
}
else{
  console.log("It is a vowel");
}



approach3:


var char = "a";

if((char != "a") && (char != "e") && (char != "i") && (char != "o") && char!="u" )
{
  console.log(char,"Consonant");
}
else{
  console.log("Not a consonant");
}






Assignment solution:  Given 3 numbers , print which is greatest

var a = 15;
var b = 20;
var c = 12;

if((a>b) && (a>c))
{
  console.log("a is greatest");
}
else if((b>a) && (b>c))
{
  console.log("b is greatest");
}
else if((c>a) && (c>b))
{
  console.log("c is greatest");
}
else{
  console.log("All are equal");
}


--In the above example The last else will say "All are equal" even if only two numbers are equal and the third is different. To handle cases where two numbers might be equal but not all three, add an additional check for complete equality. 

more improved code:
--------------------


var a = 15;
var b = 20;
var c = 12;

if (a === b && b === c) {
    console.log("All are equal");
} else if ((a >= b) && (a >= c)) {
    console.log("a is greatest");
} else if ((b >= a) && (b >= c)) {
    console.log("b is greatest");
} else {
    console.log("c is greatest");
}



Another way to find out the biggest value among 3 numbers:


var a = 5;
var b = 5;
var c = 2;

var biggest = a;

if (b > biggest) {
    biggest = b;
}

if (c > biggest) {
    biggest = c;
}

console.log("Biggest is", biggest);





Assignment5 solution: Given the year of birth, if the
  
  1. Age is between 13 and 19 (both included) print Teenage and
  2. Age in between 20 and 29 (both included) print Twenties
	otherwise print "Adult".   


 var yob = 1996;
 var age = 2023;

 console.log(age);

 if( (age>=13) && (age<=19) )
 {
   console.log("Teenage");
 }
 else if((age>=20) && (age<=29))
 {
   console.log("Twenties")
 }
 else
 {
    console.log("Adult");
 }


Assignment solution: Vote eligibility using ternary operator



var age = 17;

var message = (age >= 18) ? "Eligible for vote" : "Not eligible for vote";

console.log(message);


Assignment solution: checking a number is Odd or even:

var number = 12;

var result = number % 2 === 0 ? "Even": "Odd";

console.log(result);



Switch Case:
=============

Whenever we have multiple options and we have a choice:

Example:

var num = 2;

switch(num)
  {

    case 1: 
	
        console.log("Depositing amount");

    case 2:
	 
        console.log("withdrawing amount");
        console.log("hello");
	
    case 3: 
        console.log("transfering the amount");

    default:
        console.log("no operation");
      
  }


- On choosing the option in above code, it will output the code present corresponding to the given option and also print all the output of all the cases which present below the chosen option.

- To avoid this, we will use break


Example:

var option = 2;

switch(option)
  {

    case 1: 

        console.log("Depositing amount");
        break;
      
    case 2: 
        console.log("withdrawing amount");
        console.log("hello");
        break;
    case 3: 
        console.log("transfering the amount");
        break;
    default:
        console.log("no operation");
      
  }


Example:

var char = "i";

switch(char)
{
	case "a":
	case "e":
	case "i":
	case "o":
	case "u":
		  console.log("vowel");
	          break;
	default : 
		  console.log("Not a vowel");
}




Example:

Given the days of the week in short format "Sun", "Mon" ... print in long format "Sunday", "Monday", ...




Using if-else:
---------------

var day = "wed";

if (day === "mon") 
{
    console.log("Monday");
} 
else if (day === "tue") 
{
    console.log("Tuesday");
} 
else if (day === "wed") 
{
    console.log("Wednesday");
}
else if (day === "thu") 
{
    console.log("Thursday");
} 
else if (day === "fri") 
{
    console.log("Friday");
} 
else if (day === "sat") 
{
    console.log("Saturday");
} 
else if (day === "sun") 
{
    console.log("Sunday");
} 
else 
{
    console.log("Invalid Day");
}



Using Switch case:
-----------------

var day = "wed";

switch(day)
{
  case "mon":
	
          console.log("Monday");
          break;
	
   case "tue":
          console.log("tuesday");
          break;

   case "wed":
          console.log("wednesday");
          break;

   case "thu":
          console.log("thursday");
          break;

   case "fri":
          console.log("Friday");
          break;

   case "sat":
          console.log("Saturday");
          break;

   case "sun":
          console.log("sunday");
          break;

    default :
          console.log("Invalid Day");

}


Example: Given a month number find out the month name:


var monthNumber = 9;
var monthName;

switch (monthNumber) {
    case 1:
        monthName = "January";
        break;
    case 2:
        monthName = "February";
        break;
    case 3:
        monthName = "March";
        break;
    case 4:
        monthName = "April";
        break;
    case 5:
        monthName = "May";
        break;
    case 6:
        monthName = "June";
        break;
    case 7:
        monthName = "July";
        break;
    case 8:
        monthName = "August";
        break;
    case 9:
        monthName = "September";
        break;
    case 10:
        monthName = "October";
        break;
    case 11:
        monthName = "November";
        break;
    case 12:
        monthName = "December";
        break;
    default:
        monthName = "Invalid Month";
}

console.log("Month name is :",monthName);


switch with boolean value:
==========================


Example: calculating the grade based on the score using switch case:

var score = 90;

// Check if the entered score is within the valid range (0 to 100)
if (score >= 0 && score <= 100) {
    

    var letterGrade;

    switch (true) {
        case (score >= 90):
            letterGrade = "A";
            break;
        case (score >= 80):
            letterGrade = "B";
            break;
        case (score >= 70):
            letterGrade = "C";
            break;
        case (score >= 60):
            letterGrade = "D";
            break;
        default:
            letterGrade = "F";
    }

    console.log("Your letter grade is: ",letterGrade);
} 
else 
{
    console.log("Invalid score. Please enter a numerical score between 0 and 100.");
}



Increment and Decrement:
========================



var x = 5;

now to increase the value of x by 1, we have 2 options:

option 1:

x = x+1;  // incrementing the value of x and reassigning the value to x.

console.log(x); //6

decrement the value by 1:

var y = 5;

y = y-1;

console.log(y);

example:

var x = 5;

x = x+1;

x = x+1;

x= x+1;

console.log(x); 

x = x-1;

x = x-1;

x = x+1;

console.log(x); 



option 2:

x++  post increment
++x  pre increment

--> both will increment the value of x by 1.


x-- post decrement
--x pre decrement

example:

var x = 5;

x++;

console.log(x); 

var y = 5;

++y;

console.log(y); 



Difference between post increment and pre increment:
-----------------------------------------------------

example1:

var x = 2;

var y = x;

console.log(x); 
console.log(y); 


example2:


var x = 2;

var y = x++; // assign the value of x to y and then increment it.

console.log(x); 
console.log(y); 

Note: post increment means, first use the variable and then increment it.


example3:

var x = 2;

var y = ++x; // first increment the value of x then assign it to the y.

console.log(x); 
console.log(y); 

Note: pre increment means, first increment the variable and then use it.

example4:

var age = 25;

console.log(age++); 

console.log(age);  

example5: pre increment:

var age = 25;

console.log(++age); 

console.log(age); 





similar type of operation will happen with post decrement and pre decrement operator as well.

example6: post decrement

var age = 25;

console.log(age--); 

console.log(age); 


example7: pre decrement

var age = 25;

console.log(--age); 

console.log(age); 
 

Example 8:

var a = 10;

var c = ++a;

var b = 10;

var d = b++;

console.log("a value is :",a); 
console.log("b value is :",b); 
console.log("c value is :",c); 
console.log("d value is :",d); 
 


Example 9:


var a = 6;

var b = a--;

var c = 10;

var d = --c;

console.log("a value is :",a); 
console.log("b value is :",b); 
console.log("c value is :",c); 
console.log("d value is :",d); 


Example1:

var x =10;

x++;

var y = ++x;

console.log(x); 
console.log(y); 


example2:

var x = 10;

x++;
x++;
++x
x++
var y = ++x;

console.log(x); 
console.log(y);



example3:

var a = 10;

var b = ++a;

var c = 10;

var d = c++;

console.log(a); 
console.log(b); 
console.log(c); 
console.log(d); 



***************************Loops In JavaScript***********************************************************






Loops in Java-script: 
=====================

--repetation of some code/task again and again...

realtime example: 

music app (songs play in loop)
paani puri 

droping the 20 guests to the railway station by bike one by one. //same task need to be repeated 20 times.





--in coding example, assume we have to print some student details from the database. and inside our database we have 100 students records are there, then writing the code to feach each student details and printing it on the console 100 time will be a cumbersome process.

--so we can write the code the fetch the students details from the database inside a loop only one time, and we can run this loop for 100 times.


--another example: if we want to print some statement 1000 times like 

console.log("Welcome to JavaScript");

--so instead of writing this statement 1000 time we can define this statement inside a loop and run that loop 1000 times.


--another example: In Amazon shopping app, there are multiple products like:

Product: 	Price

earphone: 	500
headphone:  	600
bottle: 	100
watch: 		1000
--
--
--


and now Amazon has decided to increase the prices of all the products by 10%, so here developer should not go to each product one by one and increase their price by 10%.

--developers need to write the code for increasing the price for the products inside the loop and this loop will run till all the products are available.



Types of Loop:
==============

--there are 3 types of loop.

1. while loop
2. do-while loop
3. for loop

1. while loop:
--------------

--every loop has 4 parts:

1. starting point or initialization
2. ending point // condition..till when
3. actual code or body // what we need to perform
4. incrementing or decrement.


Note: if a loop does not have any ending point then that kind of loop is called as infinite loop.


example:


jumping marathon(one jump at a time)
0--------------------------------------------------------------------100


starting point : 0
ending point(till when he will make a jump...condition) : 100
making a jump (actual code or body) 
incrementing by 1 jump (how many jump...here 1 jump at a time)


so here :

jump = 0
jump <=100
console.log("Jumping");
jump = jump + 1;
//jump++;

syntax:


starting point

while(condition) //till this condition is true
{
//code

//increment or decrement
}


example:

var jump = 0;

while(jump <= 10)
{
console.log("Jumping ", jump);

jump++; // jump = jump + 1;
}



flow of a while loop
---------------------


1. starting point

2. while(condition) //till this condition is true
{

3. //code

4. //increment or decrement
}


1 2 3 4
2 3 4
2 3 4
2 3 4
till 2.(condition will become false)





lets print "Welcome to JavaScript" message 10 times:
----------------------------------------------

var num = 1; //starting point or initialization

while(num <= 10)  // condition, till when this loop will run
{

console.log("Welcome to JavaScript"); // body

num++; // incrementing by 1

}


another way:
------------

var num = 1; //starting point or initialization

while(num != 6)  // condition, till when this loop will run
{

console.log("Welcome to JavaScript", num); // body

num++; // incrementing by 1

}


--try to dry run the above example..

Note: in the above program if we remove the last statement i.e num++ then it will go for an infinite loop.





example:

lets print the number starting from 50 to 70;



var num = 50;

while(num <= 70)
{

console.log(num);

num++;

}


example: lets print all the even numbers between 0 to 50;


var num = 0;

while(num <= 50)
{

console.log(num);

num = num+2;
}


another way:
-------------

var num = 0;

while(num <= 50)
{

if(num % 2 === 0)
{
console.log(num);
}

num++;

}





Iphone example:
===============

suppose you want to buy one iphone: and the cost of this iphone is: 60000/-


--and from your home every month you are getting your pocket money 5000/-

--you think i will save 500 from each month of pocket money and i will put that 500 inside a piggy bank. 

--and when it will become 60000/- then i will purchage the iphone.

--so you will take one piggy bank and keep some initial amount inside that, lets say 1000.

--now on every month you will put 500 inside this piggy bank till....that amount will bocome 60000 or above.

example1:

var amount_in_pb = 1000;

while(amount_in_pb <= 60000)
{

console.log("Keeping 500 inside the piggy bank");

amount_in_pb = amount_in_pb + 500;

console.log("Final amount after the month is: ", amount_in_pb);

}


another way: with month count
--------------

var amount_in_pb = 1000;
var month_count =1;


while(amount_in_pb <= 60000)
{

console.log("Keeping 500 inside the piggy bank");

amount_in_pb = amount_in_pb + 500;

console.log("Final amount after the month: "+month_count++, amount_in_pb);

}



Assignments:

1. printing all the even numbers from given number to the limit.

2. printing "Welcome to JavaScript" 10 times. with number

3. printing a table for a given number

var x = 4

4
8
12
16
20


4. printing a table for a given number in descriptive manner.

var x = 5;

5 * 1 = 5
5 * 2 = 10
5 * 3 = 15
5 * 4 = 20
--
--
5 * 10 = 50


5. finding the sum of all the numbers starting to limit.

6. finding the avg of all the numbers starting to limit.

7. printin 1 to 10 in reverse order.

8. printing the sum of all the multiple of 3 from stating to a given limit.

9. count the sum of all odd numbers between 20 and 40.

10. printing Odd and Even number with message from 50 to 60

11. We have EmployeeId from 1 to 20, Employee number 5, 8, 12 are the managers, print the "Welcome EmployeeId". and for the remaining employees print "Hello EmployeeId".








break and continue:
===================

break: it is used to stop the execution of a loop in the middle.


Guest Analogy: 

--There are 10 guests coming to my home, After 2-3 days they decided to leave their home.

--They all have the train on the same day and at the same time.

--I need to drop them at the railway station but I have one bike which can only take one person at a time.

--In this case, I need to drop each guest one by one

--Taking the First guest to the railway station, dropping them and arrive back and follow the same procedure again and again till the end.

--Suppose I took the First Guest and dropped him to the Railway station and come back.

--Again I took the Second Guest and follow the same.

--Now, Next I took the third guest to Railway station and found that Train has gone.

--So, Will I continue the above procedure or stopped it ?

--Obviously, I will stop it.


example: without break;

var guest=1;

while(guest <= 10)
{

console.log("Guest dropped at station",guest);

guest++;

}


example: with break; when dropping 4th Guest, train gone...


var guest=1;

while(guest<=10)
{

if(guest == 4)
{
console.log("Train gone...");
break;  //here control comes out from the loop
}

console.log("Guest dropped at station",guest);

guest++;

}



example:


var guest=1;

while(guest<=10)
{

console.log("Guest dropped at station",guest);

if(guest == 4)
{
console.log("Train gone...");
break;
}

guest++;

}




predict the output:
===================


Q1/-

while(true)
{

	console.log("Welcome");

}




Q2/-

var count = 0;

while(true)
{

count++;

console.log("Welcome", count);

}



Q3/-

var count = 0;

while(true)
{

	count++;

	if(count == 11)
	{
		break;
	}

	console.log("Welcome", count);

}





Iphone example with break:
---------------------------

--if on the 4th month we win the lottery for 60000 then we need to break the loop:

var amount_in_pb = 1000;
var month_count =1;


while(amount_in_pb <= 60000)
{

console.log("Keeping 10000 inside the piggy bank");

amount_in_pb = amount_in_pb + 10000;

console.log("Final amount after the month: "+month_count++, amount_in_pb);

  if(month_count == 4){
    console.log("Win the lottery..")
    break;
  }

} 



continue:
==========

--it is used to skip one iteration of the loop.

--after continue it will skip the remaining code and control will go the condition again.


while(con){

--
--
--
continue;
--
--
--
}









Guest Analogy:
--------------

--Suppose the third guest is Sick, In that case I will skip him.

--and I will continue with the fourth guest and follow the same procedure.



example:

var guest=1;

while(guest <= 10)
{

console.log("Guest dropped at station",guest);

if(guest == 4)
{
continue;
}

guest++;

}



--trace the above example....


example: above code modified.

var guest=1;

while(guest<=10)
{

if(guest == 4)
{
console.log("Guest is Sick");
guest++; //update the guest count and skip the furthur execution for this cycle
continue;
}

console.log("Guest dropped at station",guest);
guest++;

}



Example: printing 0 to 10.


var num = 0;

while(num <= 10)
{

console.log(num);

num++;

}



Example: printing 0 to 10 while skipping 3 and 7


var num = 0;

while(num <= 10)
{

if(num === 3 || num === 7)
{
num++; //update the num
continue; //skip the remaining code of this cycle

}

console.log(num);

num++;

}





Iphone example with continue:
----------------------------

--if on the 4th month we did not get the pocket money:

var amount_in_pb = 1000;
var month_count =1;


while(amount_in_pb <= 60000)
{

if(month_count == 4)
{
month_count++; // update the month count and skip the furtur iteration for this cycle.
continue;
}

console.log("Keeping 10000 inside the piggy bank");

amount_in_pb = amount_in_pb + 10000;

console.log("Final amount after the month: "+month_count++, amount_in_pb);


} 

continue coding example another analogy:
----------------------------------------

--In amazon shopping app there are 5000 prime customer.

--And amazon decided to give 100/- cashback to all the customers.


var number_of_prime_customer = 50;
var customer_id=1;

while(customer_id <= number_of_prime_customer){

console.log("Giving 100 Rupee cash back", customer_id);

customer_id++;
}






Now --And amazon decided to give 100/- cashback to all the customer exception those they are using ICICI credit card.

imagine customer 4,10, 20, 25 using the ICICI bank credit card..


var number_of_prime_customer = 50;
var customer_id=1;

while(customer_id <= number_of_prime_customer){

if(customer_id === 4 || customer_id === 10 || customer_id === 20 || customer_id === 25)
{
console.log("Customer using ICICI credit card.. so no discount", customer_id);
customer_id++; //update the customer count
continue; // skip the furthur execution
}

console.log("Giving 100 Rupee cash back", customer_id);

customer_id++;
}


Example: printing all the even numbers from 0 to 20;

var num=0; 

while(num <= 20)
{
	if(num % 2 === 0)
	{
		console.log("even numbers", num);
	}
num++;

}



Example: Skipping the Odd numbers:


var num=0; 

while(num <= 20)
{

if(num % 2 !== 0)
{
num++;
console.log("Skipping Odd numbers");
continue;
}
console.log("even numbers", num);

num++;

}



Q/- print the avarage of even numbers from 1 to 100.


var start = 1;
var limit = 100;
var sum = 0;
var count =0;

while(start <= limit)
{

//find the even numbers
if(start % 2 === 0)
{

//counting how many numbers are even
count++;

sum = sum + start;


}


start++;

} 


var avg = sum/count;


console.log("Total numbers of even are: ",count);
console.log("Sum is : ",sum);
console.log("The Avarage is :",avg);


For Loop:
==========

--it is similar to while loop.

--repeting the task multiple time.

--there are some difference where we can use while loop and where we can use for loop.

--any loop as 4 part:

1. intial value: from where we want to start the loop
2. condition: till where this loop will run.
3. actual taks: 
4. increment or decrement.

for loop syntax:
-----------------

for(initialization;condition;increment/decrement)
{

//actual code.

}







example1: printing Hello world 5 times using while loop:



var i = 1;

while(i <=5)
{
console.log("Hello World");
i++;
}


example2: printing Hello world 5 times using for loop:


for(var i=1;i<=5;i++)
{
	console.log("Hello World");
}




sequence of execution:
----------------------

1. initialization
2. condition
3. actual code
4. increment or decrement


2,3,4: 2,3,4: 2,3,4 ... till the condtion become false


Note: Another way to write the for loop:

var i =1;

for(;i<=5;)
{
	console.log("Hello World");
	i++;
}


Example: Printing 1 to 10 using for loop:
-----------------------------------------

for(var i=1;i<=10;i++)
{
	console.log(i);
}


Example: Printing 1 to 5: 12345
---------------------------------

var bag="";

for(var i=1;i<=5;i++)
{
	bag = bag+i;
}

console.log(bag);



String concatanation:
---------------------
example1:

var i = 1+2;
console.log(i); //3


example2:

var i = 1+" 2";
console.log(i); //1 2

example3:

var bag="";

for(var i=1;i<=5;i++)
{
	bag = bag+i;
	console.log(bag);
}

output:
1
12
123
1234
12345

example4:

var bag=0;

for(var i=1;i<=5;i++)
{
	bag = bag+i;
}

console.log(bag);

output: 15


example5:

var bag=0;

for(var i=1;i<=5;i++)
{
	bag = bag+i;

	console.log(bag);

}



output:
1
3
6
10
15

Reversing the loop: printing 5 to 1:
------------------------------------
example1:

for(var i = 5; i>=1;i--)
{
console.log(i);
}

output:
5
4
3
2
1

example2: accumulation

var bag="";

for(var i = 5; i>=1;i--)
{
	bag = bag+i+" ";
}

console.log(bag);

output:
5 4 3 2 1


Example: Getting the factorial of 5:  5 * 4 * 3 * 2 * 1

var result=1;

for(var i=5; i>=1;i--)
{
	result = result * i;
}

console.log(result);

output: 120

another way: 1 * 2 * 3 * 4 * 5
------------

var fact = 1;

for(var i=1;i<=5;i++)
{
fact = fact * i;
}

console.log(fact);

output: 120



Home Assignment
===============
1. Printing 1 to 5 using for loop in the following format: 12345

2. finding the factorial of a given number using for loop

3. printing all the even numbers from 10 to 40 except 20 and 30.

4. printing 100 to 80 (reverse loop) using for loop

5. finding the sum of first 50 numbers.

6. printing all the odd numbers and even numbers with message between 20 to 50.

7. printing 20 to 30 using infinite while loop.





Break and Continue:
====================

example1:

for(var guest = 1;guest <=10; guest++)
{

	console.log("guest got the train",guest);

}

example2:

for(var guest = 1;guest <=10; guest++)
{
	if(guest == 3)
	{
		console.log("Train Gone..");
		break;
	}

console.log("guest got the train",guest);

}



example3:

for(var guest = 1;guest <=10; guest++)
{
	if(guest == 3)
	{
		console.log("Guest is sick..",guest);
		continue;
	}

console.log("guest got the train",guest);

}


Pridict the output:
===================

var count = 1;

for(var i=1; i<10; i++)
{

	if(i === 5)
	{
		continue;
	}

count++;

}

console.log(count);



for loop another syntax:
=========================

for(;;) // all the three part is optional. and second part is by default true.
{

}


printing 1 to 10 using for loop:

example1:

var i =1;

for(;i<=10;i++)
{
	console.log(i);
}

console.log("bye");


example2:

var i =1;

for(;;)
{
	console.log(i);

	i++;

}

console.log("bye");


example3:

var i =1;

for(;;)
{

	console.log(i);


	if(i == 10)
	{
		break;
	}

i++;

}

console.log("bye");


example: print the square of all the even number and cube for all the odd numbers from 1 to 10:

option1:

for(var i=1;i<=10;i++)
  {
    if(i % 2 === 0){
      console.log(i ** 2);
    }
    else
    {
      console.log(i ** 3);
    }
  }

option2:


for(var i=1;i<=10;i++)
{

i % 2 === 0? console.log(i ** 2): console.log(i ** 3); 

    
}

option3:

for(var i=1;i<=10;i++)
{
  console.log(i % 2 == 0? i ** 2 : i ** 3);
}




Example: WAP to find total number of digits in a number:



Note: parseInt() function can also be used to truncate the decimal point values.

example:

var x = 100.55;

console.log(parseInt(x));//100


ex:

var x= 5/2;

console.log(x); //2.5
console.log(parseInt(x)); //2









var num = 200006;



var dc = 0;

if(num === 0)
{
  dc++;
}
else
{
for(var i =num;i !==0 ; i = parseInt(i/10))
  {
    
    dc++;
  }
}

console.log(dc);


dry run:

200006/10 = 20000.6 = parseInt==> 20000

20000/10 = 2000

2000/10 = 200

200/10 = 20

20/10 = 2

2/10 = 0.2  parseInt ==> 0



using while loop:
-----------------

var num = 20006;
var dc = 0;

if(num == 0){
	dc++
}
else
{
	while(num != 0)
	{
		dc++;
		num = parseInt(num/10);
	}
}
console.log(dc);		


Example: WAP to find sum of digits in a number:

2561 = 14

 


var num = 1876;   //22
var sum = 0;

while(num != 0){

	var last_digit = num % 10;

	sum = sum + last_digit;

	num = parseInt(num/10);
}

console.log("The sum of digit is " + sum);


using for loop:
---------------

var num = 1876;
var sum = 0;

for(var n = num; n != 0; n = parseInt(n/10)){
	sum = sum + n % 10;
}


console.log("The sum of digit is " + sum);



Q/- WAP to reverse a given number.

var num = 1234;   //4321

var bag = ""; 


for(var i = num; i != 0; i = parseInt(i/10))
{

var last_num = i % 10;  12 

bag =bag+last_num;   //"4321"


}

console.log(bag);





Nested Loops:
============





Case 1: printing the "Hello World" 5 times..


for(var i=1; i<=5;i++)
{
	console.log("Hello World",i);
}


Now what if we need to run this entire for-loop 3 times.

--in this case we can take another loop which will run 3 times.

example:


for(var j=1; j<=3; j++)
{

	for(var i=1; i<=5;i++)
	{	
		console.log("Hello World",j,i);
	}

//console.log("\n");

}


output:

1 1
1 2 
1 3
1 4
1 5

2 1
2 2
2 3
2 4
2 5

3 1 
3 2
3 3
3 4
3 5





Note: As we can use nesed if-else, similarly we can use nested loops..

example1: for inside for

//outer loop
for(initialization; condition; incr/decr)
{
	//actual code for outer loop
	
	//inner loop
	for(initialization; condition; incr/decr)
	{
		//actual code for inner loop
	}


}


example2: while inside another for

//outer loop
for(initialization; condition; incr/decr)
{

	//actual code for outer loop

	//inner loop
	initilization
	while(condition)
	{
		//actual code for inner loop
		incre/decr;
	}


}


example3: while inside while

//outer loop
initialization
while(condition)
{

	//actual code for outer loop

	//inner loop
	initialization
	while(condition)
	{
		//actual code for inner loop
		//incre/decre
	}

	incre/decre;
}


example4: for inside while

//outer loop
initialization
while(condition)
{

	//actual code for outer loop

	//inner loop
	for(initialization; condition; incr/decr)
	{
		//actual code for inner loop
	}

	incre/decre;
}


Use-case of nested for-loop:
============================

suppose 1 bowler bowl 6 time in an over..so there will be a loop that will run 6 times.



for(var i=1; i<=6; i++)
{

	console.log("bowler ball",i);

} 

now if it is a t20 match then 20 bowlers needs to run this loop..


//outer loop 20 times
for(var j=1; j<=20; j++)
{

	console.log("Start the over ",j);

	//inner loop 6 times
	for(var i=1; i<=6; i++)
	{

		console.log("bowler ball",i);
	}

	console.log("End the over", j);
}






Excercise: one golgapa shopkeeper giving 6 golgapas to each person, now he need to give the golgapas to 5 people.





for(var people=1; people<=5;people++)
{

	console.log("Start the People ",people);

	for(var golgapa=1; golgapa<=6; golgapa++)
	{
		console.log("Golgapa ",golgapa);
	}

	console.log("End of People ",people);

} 


--here for each people the inner loop will run from the begining till inner loop ends.



printing golgapas in a form of matrix:
--------------------------------------

1 person 6 golgapa: 

for(var p=1; p<=5;p++)
{
	var box="";

	for(var g=1; g<=6; g++)
	{
		box= box+g+"Golgapa ";   
	}


console.log(box);

//console.log("End of People ",p);

} 



Quiz/- what will happen if we define the box out side the first loop ?

--here we are not empting the box after each iteration of outer loop..so the previous values will be persisted after each iteration of outer loop.



Excersise:
===========

Imagine you are a farmer and you need to put 10 seed * in a flat field in horizontal manner:


var bag="";

for(var seed=1; seed<=10; seed++)
{
	bag = bag+"* ";
}

console.log(bag);  // 

Now we need to put seeds in the similar manner in 5 similar fields:


for(var field=1; field<=5; field++)
{


	var bag="";
	
	for(var seed=1; seed<=10; seed++)
	{
		bag = bag+"* ";
	}

	console.log(bag);

}


output:
-------
* * * * * * * * * * 
* * * * * * * * * *
* * * * * * * * * *
* * * * * * * * * *
* * * * * * * * * *



Example 2: we need to put 1 seed in 1st field, 2 seed in 2nd field, 3 seed in 3rd field 4 seed in fourth field, 5 seed in 5th field.

*
* *
* * *
* * * *
* * * * *


for(var field=1; field<=5; field++)
{


	var bag="";

	for(var seed=1; seed<=field; seed++)
	{
		bag = bag+"* ";
	}

	console.log(bag);

}


Example 3: we need to put:

5 seed in 1st field
4 seed in 2nd field
3 seed in 3rd field
2 seed in 4th field
1 seed in 5th field


for(var field=1; field<=5; field++)
{


	var bag="";

	for(var seed=5; seed>=field; seed--)
	{
		bag = bag+"* ";
	}

	console.log(bag);

}


output:

* * * * *
* * * * 
* * *
* * 
*




another way: starting from 5th field
-------------

for(var field=5; field>=1; field--)
{


	var bag="";

	for(var seed=1; seed<=field; seed++)
	{
		bag = bag+"* ";
	}

	console.log(bag);

}





Example 4: print the following format:

1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6


--here 4 row and 6 column..

--outer loop will run 4 times and inner loop will run 6 times..


for(var field=1; field<=4; field++)
{


	var bag="";
	for(var seed=1; seed<=6; seed++)
	{
		bag = bag+seed+" ";
	}

	console.log(bag);

}


Note: at the time of whole 1st inner loop i.e 1 2 3 4 5 6 the outer loop(field value) is 1
similarly for the second inner loop 1 2 3 4 5 6 the outer loop (field value) is 2. 



Example 5:

print the following format:

1 1 1 1 1 1
2 2 2 2 2 2
3 3 3 3 3 3 
4 4 4 4 4 4


--here 4 row and 6 column..

--outer loop will run 4 times and inner loop will run 6 times..


for(var x=1; x<=4; x++)
{


	var bag="";

	for(var y=1; y<=6; y++)
	{
		bag = bag+x+" ";
	}

	console.log(bag);

}



Example 4: print the following format:

1
1 2
1 2 3 
1 2 3 4
1 2 3 4 5 






for(var x=1; x<=5; x++)
{


	var bag="";
	
	for(var y=1; y<=field; y++)
	{
		bag = bag+y+" ";
	}

	console.log(bag);

}


Example 5: print the following format:

1 2 3 4 5
1 2 3 4
1 2 3 
1 2
1



for(var x=1; x<=5; x++)
{


var bag="";

	for(var y=1; y<= 6-x; y++)
	{
		bag = bag+y+" ";
	}

	console.log(bag);

}


another way:
------------

for(var i=5; i>=1; i--)
{


	var bag="";

	for(var j=1; j<=i; j++)
	{
		bag = bag+j+" ";
	}

	console.log(bag);

}


example6:

print the following patter:

*
* * 
* * * 
* * * *
* * * * *
* * * *
* * *
* * 
*


combine the above examples:


for (var field = 1; field <= 5; field++) {


  var bag = "";
  for (var seed = 1; seed <= field; seed++) {
    bag = bag + "* ";
  }

  console.log(bag);

}


for(var field=5; field>=1; field--)
{


var bag="";
for(var seed=1; seed<=field; seed++)
{
bag = bag+"* ";
}

console.log(bag);

}


to make arrow sharp of above pattern(start the outer loop for the second part from 4):--



for (var field = 1; field <= 5; field++) {


  var bag = "";
  for (var seed = 1; seed <= field; seed++) {
    bag = bag + "* ";
  }

  console.log(bag);

}


for(var field=4; field>=1; field--)
{


var bag="";
for(var seed=1; seed<=field; seed++)
{
bag = bag+"* ";
}

console.log(bag);

}



another way: using only one nested for-loop:
---------------------------------------------


var k = 1;

for (var x = 1; x <= 9; x++) {




  var bag = "";
  for (var y = 1; y <= k; y++) {
    bag = bag + "* ";
  }


  x <=4 ? k++ : k--;




  console.log(bag);

}













example7: print the following pattern:

5 4 3 2 1 
5 4 3 2
5 4 5
5 4
5




for(var x=1; x<=5; x++)
{


	var bag="";

	for(var y=5; y>=x; y--)
	{
		bag = bag+y+" ";
	}

	console.log(bag);

}



another way:
-----------

for(var x=5; x>=1; x--)
{


	var bag="";

	for(var y=5; y>=6-x; y--)
	{
		bag = bag+y+" ";
	}

	console.log(bag);

}



break and continue in nested loop:
----------------------------------


--break is used to break the loop and come out from the loop.

--in case of nested loop, it will break the inner loop and come out from the inner loop.but not from the outer loop.

--similarly continue will only skip the iteration of the inner loop.but not skip the iteration of the outer loop.



example:

for(var i=1; i<=5; i++)
{

	for(var j=1; j<=5; j++)
	{

		console.log("i= ",i, "j= ",j);

	}


}


using break inside the inner loop:
----------------------------------

for(var i=1; i<=5; i++)
{

	for(var j=1; j<=5; j++)
	{
		if(j == 3)
		{
			break;
		}
		console.log("i= ",i, "j= ",j);
		
	}


}



using break inside the outer loop:
----------------------------------

for(var i=1; i<=5; i++)
{

	if(i == 3)
	{
		break;
	}

	for(var j=1; j<=5; j++)
	{
	
		console.log("i= ",i, "j= ",j);
		
	}


}


using continue inside the inner loop:
------------------------------------

for(var i=1; i<=5; i++)
{

	for(var j=1; j<=5; j++)
	{
		if(j == 3)
		{
			continue;
		}
		console.log("i= ",i, "j= ",j);
		
	}


}



using continue inside the outer loop:
-------------------------------------

for(var i=1; i<=5; i++)
{

	if(i == 3)
	{
		continue;
	}

	for(var j=1; j<=5; j++)
	{
	
		console.log("i= ",i, "j= ",j);
		
	}


}




 Excersice: Print the calandar in the following format:

Month 1: Day 1
Month 1: Day 2
Month 1: Day 3
--
--
Month 2: Day 1
Month 2: Day 2
Month 2: Day 3
--
--
Month 12: day 1
--
Month 12: day 31




solution1: 

for(var month=1; month<=12; month++)
{

	for(var day=1; day<=31; day++)
	{

		console.log("Month ",month, ":", "Day ",day);

	}

}


solution2: improved



for(var month=1; month<=12; month++)
{

	var day_value=31
	

	if(month == 2)
	{
		day_value=28;
	}
	else if(month == 4 || month == 6 || month == 9 || month == 11 )
	{
		day_value=30;
	}


	for(var day=1; day<=day_value; day++)
	{

		console.log("Month ",month, ":", "Day ",day);

	}

}

 

solution3: beautify1


for(var month=1; month<=12; month++)
{

	var day_value=31
	

	if(month == 2)
	{
		day_value=28;
	}
	else if(month == 4 || month == 6 || month == 9 || month == 11 )
	{
		day_value=30;
	}


	switch(month)
	{

		case 1: 
			console.log("***January***");
			break;
			
		case 2: 
			console.log("***February***");
			break;
		case 3: 
			console.log("***March***");
			break;
		case 4: 
			console.log("***April***");
			break;

		default: 
			console.log("***Other Month****");
			break;
	}



	for(var day=1; day<=day_value; day++)
	{

		console.log("Month ",month, ":", "Day ",day);

	}

}



solution4: beautify2


for(var month=1; month<=12; month++)
{

	var day_value=31
	var month_name;

	if(month == 2)
	{
		day_value=28;
	}
	else if(month == 4 || month == 6 || month == 9 || month == 11 )
	{
		day_value=30;
	}


	switch(month)
	{

		case 1: 
			month_name = "January";
			break;
		case 2: 
			month_name = "February";
			break;
		case 3: 
			month_name = "March";
			break;
		case 4: 
			month_name = "April";
			break;

		default: 
			month_name = "Other Month";
			break;
	}



	for(var day=1; day<=day_value; day++)
	{

		console.log(month_name, ":", "Day ",day);

	}

	console.log("\n");

}




Example: Checking if a given number if prime number or not.

Note: A prime number is a number which has only 2 divisor (i.e 1 and that number itself)

1 is not a prime number, because it has only 1 divisor.

ex:

2, 3, 5, 7, 11, 13, 17, 19, ...


var given_number = 51;

var isPrime = true;

for(var i=2; i< given_number; i++)
{
	if(given_number % i ===0  )
	{
		isPrime = false;
		break;
	}
}

if(isPrime)
{
	console.log("Given number is a prime");
}
else
{
	console.log("Given number is not prime");
}



Example : find all the prime numbers from 2 to the given limit.


var limit = 20;

for(var gn=2; gn<= limit; gn++){

	var isPrime = true;

	for(var i=2; i< gn; i++)
	{

		if(gn % i ===0  )
		{
			isPrime = false;
			break;
		}
	}

	if(isPrime)
	{
		console.log("prime number: ",gn);
	}

}









do-while loop:
--------------


--in while or for loop, there may be a chance that the body of the loop may execute 0 number of time. 

--if we want to execute our loop code at-least one time irrespective of the condition then we can use the do-while loop.

--while and for loops are the pre-condition check loop where as do-while is the post condtion check loop.


syntax:

initialization

do
{
//actual code

incre/decr;

}
while(condition);


example:


example: difference between while and do-while:


var count = 10;

// Using while loop

console.log("Using while loop:");
while (count < 5) {
    console.log("Count using while loop: " + count);
    count++;
}




// Using do-while loop
var count = 10;
console.log("Using do-while loop:");
do 
{
    console.log("Count using do-while loop: " + count);
    count++;
} while (count < 5);






example:


var count =1;

do
{
console.log(count);
count++;
}
while(count <=5);


--here even though the condition is false, but still our code will execute at-least one time.


example: Guess the output:

what is output of following code

var a = 5;

do
{
	console.log(a);
	a+=5;


}
while(a <= 5); 

console.log("Bye");





Array:
========


var name1="ram";
var name2="shyam";
--
--




--if we want to store 1000 names then we should not declare 1000 diff variables.

amazon example:

var product1="mobile";
var product2="earphone";
--
--

Do the same for 50 products
Do the same for 4000 products; use of conventional approach is impractical


--the solution is array..

--array is a data-structure that represents collection of elements

--array is the continuous part of memory location that store multiple values.


- first element of an array is available at index 0 and the last element is available at index n - 1 where n is the number of elements in the array.

50 

0 <----> 49 





syntax:

var arr = []; //empty array

example:

var names=["Ram","mohan","shyam","hari"];

console.log(names);


--Java script array can hold homogeneous or heterogeneous types of elements.

example:


var numbers = [10,20,70,40,30,55,44];

console.log(numbers);

or 
	     0       1   2     3             4             5   6      7    8      9
var arr = ["hello", 10, 20, "welcome", "sage university", 50, true, true, false, "hi"];

console.log(arr);

--array stores the elements on 0 based index.

example:
	       0      1      2        3
var names = ["Ram","Shyam","mohan","hari"]; 

console.log(names[0]); // Ram
console.log(names[1]); // Shyam
console.log(names[2]); // mohan
console.log(names[3]); // hari
console.log(names[4]); // undefined 


or

for(var i=0;i<=3;i++)
{
	console.log("Welcome",names[i]);
}

 

length of an array:
-------------------

--inside an array, there is a property called "length" which will represent the size of an array(number of elements).
example:

console.log(names.length); // 4


for(var i=0;i<names.lenght;i++)
{
	console.log(names[i]);
}



example:

var trains = ["Rajdhani","Satabdi","duronto","garib rath","vande bharat"];

//console.log("Total number of trains :",trains.length); //5

or 

var total_train = trains.length;

console.log("Total number of trains :",total_train); //5


example: printing the last train:

console.log(trains[4]); //vande bharat

but if the array of trains will be like as follows:


var trains = ["Rajdhani","Satabdi","duronto","garib rath","vande bharat","vaishali exp"];

then the trains[4]; // hardcoded value will gives the wrong answer.

so the proper solution will be 

var last_index= trains.length-1;

console.log("Last Train is: ",trains[last_index]);



Q:/ create an array of 7 vegitables, and print the last vegitable.





inbuilt functions of an array:
==============================

1. push() and pop():
--------------------

push(): this function is used to add a new element(s) to an array at the last.

example:

var arr = []; // empty array

arr.push("A");
arr.push("B");
arr.push("C", "D"); // we can push more than one elements also

console.log(arr); //["A","B","C","D"];

console.log(arr.length);// 4
 


Q/- create an empty array of super heroes, and push 3 super hero in it, and print the last super hero.


pop():
------

--it is used to delete the last element from an array, and this function will return the deleted element also.

example:

var names =["Ram","Shyam","Hari","Mohan"];

console.log(names); //["Ram","Shyam","Hari","Mohan"];

names.pop();

console.log(names); //["Ram","Shyam","Hari"];

var x= names.pop();

console.log(x); // Hari
console.log(names); ["Ram","Shyam"]


Q/- Guess the output:

var arr= [10,20,40,2,4,5,12,18];

arr.pop();
arr.pop();

var a= arr.pop();

arr.push(80);

console.log(arr); // 
console.log(a);//  



updating the elements in an array:
----------------------------------


var superheros=["batman","superman","saktiman","ironman","thor"];

console.log(superheros); //["batman","superman","saktiman","ironman","thor"];

now change the batman to the hanuman and ironman to krishna:

superheros[0]="hanuman";
superheros[3]="krishna";

console.log(superheros); //["hanuman","superman","saktiman","krishna","thor"];


for(var i=0;i<superheros.length;i++)
{
	console.log(superheros[i]);
}


or

for(var i=0;i<superheros.length;i++)
{
	console.log(i+1,superheros[i]);
}



Q/-

var arr= [2,3,5,8,7,9,8]; // delete the last 3 items:


A/-

approach 1:

arr.pop();
arr.pop();
arr.pop();


approach2:

for(var i=1;i<=3;i++)
{
arr.pop();
}



Q/-

var movies = ["tiger3","pushpa","jawan","inception","bahubali","hera pheri"];

print all the movies name except the "inception";





A/-

approach1:

for(var i=0;i<movies.length;i++)
{

if(i == 3)
{
continue;
}

console.log(movies[i]);

}


approach2:


for(var i=0;i<movies.length;i++)
{

if(movies[i] === "inception")
{
continue;
}

console.log(movies[i]);

}



Q/- print the last 3 elements of an array.

var arr = ["A","B","X","M","Z","P","Q","S","N"];






for(var i = arr.length-3; i< arr.length; i++)
{

	console.log(arr[i]);

}


--the above code will work if the elements inside the array is greater than or equal to 3. but if the elements inside an array is 2 then the output will be wrong: it should print all the elements.


example

 
var arr = ["A","B"];



for(var i = arr.length-3; i< arr.length; i++)
{

	console.log(arr[i]);

}

output:

undefined
A
B

so the correct code will be


var start = 0;

if(arr.length >= 3)
{
	start = arr.length-3;
}



for(var i = start; i< arr.length; i++)
{

	console.log(arr[i]);

}



Example:




var arr = [10,20,30,40];


arr[0] = 10
arr[1] = 20
arr[2] = 30
arr[3] = 40



console.log(arr[1]); //20


first element: 0th index

last element: n-1 : where n is the number of elements inside an array.






Q/- create an array of 5 subject marks of a student and print the total marks.

A/-


var marks = [80,40,55,45,75];

var sum=0;

for(var i =0;i<marks.length;i++)
{
sum = sum+marks[i];
}


console.log("Total marks is :",sum);



Q/- finding the count of odd numbers and count of even numbers inside an array of numbers.


var arr= [10,11,22,12,14,15,16,17,19,30,20];


approach1:


var oc=0;
var ec=0;

for(var i=0;i<arr.length;i++)
{

	if(arr[i] % 2 ===0)
	{
		ec++;
	}
	else
	{
		oc++;
	}
}


console.log("Even count is: ",ec);
console.log("Odd count is: ",oc);


approach2:



var oc=0;
var ec=0;

for(var i=0;i<arr.length;i++)
{

arr[i] % 2 === 0 ? ec++ : oc++;

}


console.log("Even count is: ",ec);
console.log("Odd count is: ",oc);




Q/- find the min element inside an array of numbers:


var arr= [10,11,22,18,14,15,16,2,17,19,30,20];



var min = arr[0];

for(var i =1;i<arr.length;i++)
{
	if(arr[i] < min)
	{
		min = arr[i];
	}

}


console.log("Minimum is :",min);









Q/- find the min element and max element inside an array of numbers:


var arr= [10,11,22,12,14,15,16,2,17,19,30,20];


var min=arr[0];
var max = arr[0];

for(var i =1;i<arr.length;i++)
{

	if(arr[i] < min)
	{
		min= arr[i];
	}

	if(arr[i] > max)
	{
		max=arr[i];
	}

}

console.log("Minimum is :",min);
console.log("Maximum is :",max);

Q/- Given an array of numbers, find out the average of all the even numbers.

var arr = [45,42,85,82,90,95,98,96,97,77,76,76,74];


*****************************************************************

playing with array:
-------------------

Javascript array is a free size array..



example1:

var arr=[]; //empty array

console.log(arr.length); //0

arr[10] = "hello";

console.log(arr.length);//11

arr[12]="hi";

console.log(arr); //

console.log(arr.length);//13


example2:


other functions inside an array:
=================================

shift() and unshift():
----------------------

shift():
--------

--The shift() method removes the first array element and "shifts" all other elements to a lower index and returns the removed element.

example:

var arr = [10,12,3,12,1,5];

arr.shift();
arr.shift();

console.log(arr); // [3,12,1,5]

var x= arr.shift();

console.log(arr); // [12,1,5]
console.log(x); // 3


unshift(-):
---------

--The unshift(-) method adds a new element to an array (at the beginning), and "unshifts" older elements.

example:


var arr = [10,12,3,12,1,5];

arr.unshift(50);

console.log(arr); // [50,10,12,3,12,1,5]


--using unshift() function we can add any number of elements at the begining.

example:

var arr = [10,12,3];

arr.unshift(50,40,15);

console.log(arr); // [50,40,15,10,12,3]


splice(---) and slice() function:
----------------------------------


splice(---):
------------

The splice() method can be used to add/remove/transform new items to an array.
- The first parameter is the index where it will start
- The second parameter is the number of elements to be deleted
- The remaining parameters are the elements to be added // it is optional



--this function will return the deleted elements inside another array.

example:


var arr = [10,12,3,12,1,5];

arr.splice(1,2,55,60,65); 

1: here at 1st location the elements will be started.

2: two elements will be deleted: 12, 3

55, 60, 65: will be added:

console.log(arr); // [10,55,60,65,12,1,5]

example2:


var arr = [10,12,3,12,1,5];

arr.splice(0,0,55,60,65); 


0: elements will be started from the 0th location
0: element will be deleted.
55,60,65: will be added

console.log(arr); // [55,60,65,10,12,3,12,1,5]


Q/- 

var arr = ["apple","banana","chery","oranges","mango"];

delete one element at index 2: chery


arr.splice(2,1);

console.log(arr); //["apple","banana","oranges","mango"];


// Add 'pineapple' and 'grape' at index 2
arr.splice(2, 0, "pineapple", "grape");


console.log(arr); //["apple","banana","pineapple","grape","oranges","mango"];

// Replace 'pineapple' with 'strawberry' at index 2
arr.splice(2, 1, 'strawberry');

console.log(arr); //["apple","banana","strawbery","grape","oranges","mango"];


example:

var fruits = ['apple', 'banana', 'cherry', 'date'];

// Extract elements from index 1 to 2 (inclusive)
var extracted = fruits.splice(1, 2);

console.log(fruits);     // Output: ['apple', 'date']
console.log(extracted);  // Output: ['banana', 'cherry']



slice():
-------


--The slice() function is used to extract a portion of an array without modifying the original array. 

--It takes two parameters: the starting index and the ending index (exclusive) of the portion to be extracted.

--if we don't give the ending index, then it will extract till end

example:

var fruits = ['apple', 'banana', 'cherry', 'date', 'strawberry'];

// Extract elements from index 1 to 3 
var slicedFruits = fruits.slice(1, 4);


console.log(slicedFruits);  // Output: ['banana', 'cherry', 'date']
console.log(fruits);         // ['apple', 'banana', 'cherry', 'date', 'strawberry'];


example:


var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// Extract elements from index 3 to the end
var subarray = numbers.slice(3);

console.log(subarray);  // Output: [4, 5, 6, 7, 8, 9]
console.log(numbers);   // Original array is unchanged



example: negetive index: it will start from reverse(end)
	                                    
var colors = ['red', 'orange', 'yellow', 'green', 'blue'];

// Extract elements from the second-to-last element to the end
let slicedColors = colors.slice(-2);

console.log(slicedColors);  // Output: ['green', 'blue']
console.log(colors);        // Original array is unchanged



includes():
----------


--The includes() function returns true if an array contains a specified value. 
--The includes() function returns false if the value is not found. 
--The includes() function is case sensitive.



array.includes(element, start)
Start position Default is 0.

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango");	//true

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Banana",1);	//false



indexOf():
----------

--it will return the index of the specified element inside an array.


indexOf(item, start):

item: The value to search for.
start: Where to start the search. Default value is 0. 

--if the item found then it will return its index otherwise will be return -1.

example:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
var index = fruits.indexOf("Apple");	//2

console.log(index);// 2

example:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
var index = fruits.indexOf("pineapple"); //-1



example:

var fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];
var index = fruits.indexOf("Apple", 3);	//4  // it will start from 3rd index


--if start position is in negetive number then it will start the search from the end.

example:


var fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];
var index = fruits.indexOf("Orange", -2);	//-1  // it will start from "Mango";

var index = fruits.indexOf("Orange", -5);	//1  // it will start from "Banana";




Q/- find out the frequency of an element inside a given array?

A/-

var arr = [5, 6, 7, 5, 9, 8, 5, 6, 8];

var element = 5;

var frequency = 0;

for (var i = 0; i < arr.length; i++) 
{
    if (arr[i] === element) {
        frequency++;
    }
}

console.log("Frequency is: ", frequency);




join(seperator):
----------------

The join() function returns an array as a string. Any separator can be specified. The default is comma (,).


example:

var arr = ["i","love","masai"];

var x= arr.join();

console.log(arr); //['i','love','masai']
console.log(x); // i,love,masai

var y= arr.join(" ");

console.log(y); // i love masai

var z= arr.join("::");

console.log(z); // i::love::masai



sort():
-------

--it will sort an array with natural sorting order.


example:


var arr = [5, 6, 7, 5, 9, 8, 5, 6, 8];

arr.sort();


console.log(arr); //[ 5, 5, 5, 6, 6, 7, 8, 8, 9]





Q/- WAP to create an array from source array that contains distinct elements of the source array

var src = [1, 2, 3, 1, 2, 3]
var dest = [src[0]]; 1	//putting the first element inside the dest array

for (var i = 1; i < src.length; i++) {
  if (!dest.includes(src[i])) {
    //you are hear means element in not in the array
    dest.push(src[i]);
  }
}
console.log(dest);


another way:
-----------

var src = [1, 2, 3, 1, 2, 3];
var dest = [];



for (var i = 0; i < src.length; i++) {
  if (dest.indexOf(src[i]) === -1) {
    dest.push(src[i]);
  }
}

console.log(dest);







Playing with String:
====================


--A string is a sequence of characters enclosed in single or double quotes, and it's used to represent textual data.

Example:

let greeting = "Hello, world!";
let name = 'Alice';




example:

let message = "Masai School";

here message is a variable which is pointing to the String object.

--this String object is a group of charecter.(space is also considered as a charecter).


--String are internally works based on array concept:

--so here 'M' charecter is sotored at the location message[0] and 'l' charecter is stored at message[11]

Example:


for(var i=0;i< message.length; i++)
{
	console.log(message[i]);
}



Difference between Array and String:
------------------------------------

example1:

let arr = ['S','A','G','E'];
let str = "SAGE";



console.log(arr[0]); // 'S'
console.log(str[0]); // 'S'


console.log(arr.length); // 4
console.log(str.length); // 4


console.log(arr); //['S','A','G','E']
console.log(str); //SAGE





example2: We can change the array elements by overwriting it.


let arr = ['S','A','G','E'];


arr[0]='M';

console.log(arr); // ['M','A','G','E']


--But String are Immutable, meaning we can't change individual characters in the String. We can create a new String with the changes.


example:

let str = "SAGE";

str[0]='M';

console.log(str); //SAGE 


example: 

let str = "SAGE";  //str is pointing to an object that has content SAGE

str[0] = 'C';  //No change because String is Immutable

console.log(str); // SAGE

str = "University";  //okay, now str is not pointing to object that contains SAGE but it points to another object that has content University because Immutability means you cannot make changes in the existing object but the variable may point to another object.

console.log(str); //University



--Strings can be created using single or double quotes. Double quotes are often used when we need to include a single quote within the string.

example:

let str1 = "This is sachin's bag"  // here single quote is also considered as a single charecter.

console.log(str1);


--String is an immutable group of charecters, but we can mutate it by converting it into a seperate String:

Approach1:

let str = "SAGE";

let arr=[];

for(let i = 0;i<str.length;i++)
{
	arr.push(str[i]);
}

arr[0] = 'C';



let bag = "";

for(let i=0;i<arr.length;i++)
{
bag = bag+arr[i];
}

str = bag;

console.log(str);


Approach2:


let str = "SAGE"
let bag = "";


for(let i=0;i<str.length;i++)
{

	if(str[i] === 'S')
	{
		bag= bag+'C';
	}
	else
	{
		bag = bag+str[i];
	}
}

console.log(str); // SAGE
console.log(bag); // CAGE



Approach3:

--Inside a String object we have an inbuit function called: replace(--), it will replace only the first match charecter

example:

let str = "SAGE";

str.replace('S','C');

console.log(str); // SAGE

let newStr = str.replace('S','C');

console.log(str); // SAGE
console.log(newStr); // CAGE




Q/- Removing a charecter from a String: "Hello, World" // removing the charecter ','.

Approach1:

let str = "Hello, World!";

let bag ="";

for(let i=0;i<str.length;i++)
{

if(str[i] === ',')
{
	continue;
}

bag= bag+str[i];
}

console.log(str);
console.log(bag);


Approach2:


let str = "Hello, World!"";

let charToRemove = ',';

let newStr = str.replace(charToRemove,'');

console.log(str);
console.log(newStr);


Q/ Inside a names array, count the names which starts from 'A'?


let arr = ["Amit", "Sonu","Dinesh","Sunil","Amar","Venu","Ajit","Aanand"]; 

let count=0;

for(let i = 0;i<arr.length;i++)
{

let str = arr[i];

if(str[0] === 'A')
{
count++;
}


}


console.log(count);



Q/- Inside a names array count the names which contains 'A'?



let arr = ["Amit", "Sonu","Dinesh","Sunil","Amar","Venu","NAMAN","Ajit","Aanand"]; 
let count=0;


for(let i = 0;i<arr.length;i++)
{

let str = arr[i];

for(let j=0;j<str.lenght;j++)
{

	if(str[j] === 'A')
	{
		count++;
		break;
	}

}

}




Q/- Given a String sentance, count the number of word in that Sentance.

A/-

let tagline = "A Transformation in Education In School";
let count = 0;


for(let i=0; i<tagline.length;i++)
{

if(tagline[i] === ' ')
{
count++;
}


}

console.log("Total number of Word is ",(count+1));


or better manner:



let tagline = "A Transformation in Education In School";
let count = 0;

if(tagline.length >0)
{
for(let i=0; i<tagline.length;i++)
{

if(tagline[i] === ' ')
{
count++;
}


}

console.log("Total number of Word is ",(count+1));

}
}
else
{
	console.log("it is a empty string");
}



length property:
----------------

console.log("SAGE".length);	//4
console.log("Masai".length);	//5
console.log("".length);		//0
console.log(' '.length);	//1





Q/- WAP to reverse a String. without the reverse() function ?


let str = "Welcome";

let bag="";

for(let i=str.length-1; i>=0; i--)
{

bag = bag+str[i];

}

console.log("Original String:",str);
console.log("Reverse String:",bag);



Some of the inbuilt functions in String:
========================================


1. String toUpperCase();
2. String toLowerCase();


example1:

let str = "Welcome";

str.toUpperCase();

console.log(str); // Welcome , becoz String is immutable


example2:

let str = "Welcome";

let str2 = str.toUpperCase();

console.log("Original String",str); //Welcome
console.log("Modified String",str2); //WELCOME


3. String trim(): It will trim the leading and trailing spaces from a string, it will not trim the spaces from the middle.

example1:

let str1= "  Welcome   ";

let str2 = str1.trim();

console.log(str1); // "  Welcome  "
console.log(str2); //Welcome


example2:

let str1= "  Welcome to Sage ";
let str2 =str1.trim();

console.log(str1);// "  Welcome to Sage "
console.log(str2);//Welcome to Sage



4. String charAt(index);  it takes the 0 based index and returns the located charecter at that index.
If the index specified to charAt() is out of the string's length range, an empty string is returned.

a
  
5. String charCodeAt(index); it returns the char ASCII code located at that index. 


example1:

let str = "Diwali";
console.log(str.charAt(0));	//'D'
console.log(str.charAt(10)); // empty string

console.log(str.charCodeAt(0));	//68


ASCII
------


65-90 : 'A' - 'Z'
97-122 : 'a' - 'z'
48-57 : '0' - '9'
32: space
rest: special symbols.



6. slice(startIndex, endIndex): extract the String from startIndex to endIndex - 1. here endIndex is optional parameter, if we don't provide endIndex then it will by default go till end of the string.

example:

let str = "Diwali";

console.log(str.slice(1,4));	//iwa
console.log(str.slice(4));	//li



7. substr(start,numberofChar): extract numberofChar from a given string from the starting index.

example:

let str = "Diwali";
console.log(str.substr(1,4));	//iwal
console.log(str.substr(1,2));	//iw
console.log(str.slice(1,2));	//i




8. String replace(oldstring newstring): The replace() method replaces only the first match

9. String replaceAll(oldstring newstring); It replaces all the matches

example1:

let text = "Hi abc abc";

let newText = text.replace("abc", "pqr");

console.log(newText);	//Hi pqr abc


example2:

let text = "Hi abc abc";

let newText = text.replaceAll("abc", "pqr");

console.log(newText);	//Hi pqr pqr



10. integer indexOf(char);

11. integer lastIndexOf(char)

--it will work as similar as array.., if the char is not found then it will return -1.

example:

let str = "Welcome";

console.log(str.indexOf('e')); //1
console.log(str.lastIndexOf('e')); //5


12. array split(-)
13. boolean startsWith(str)
14. boolean endsWith(str)


Assignment:

1. WAP to check if a String is palindrom or not.
Sample input: NAMAN
Sample Output: NAMAN is a palindrome String

2. WAP to check to segragate vowels on the left hand side and consonants on right hand side of a String.
Sample input: SAGE
Sample Output: AESG

3. WAP to remove duplicate charecters from a given string.
Sample input: AABABCCDAB
Sample output: ABCD




Functions:
==========



--It is a named block of statement that is used to perform a particular task.

--A function is used to make code reusable and it increases modularity in the code.

syntax:


function printSomething(a,b)
{

// 10000

}








--a function syntax is basically has 2 parts:

1. function signature: 

function functionName(parameter-list)

2. function body:
{
// body of the function
}



--A function can be created with empty parameter list.

example:

function functionName()
{
 //body of function
}



**To execute a function; we have to call the function.


--a function is having 2 section:

1. defining a function // function author/creator will define a function
2. calling a function // function caller will call a function.


--Inside a function,we can write any number of statements.
--A function can be called any number of times.
--A function can call any other function.



example: without a function

let num1 = 10;
let num2 = 20;

let sum = num1+num2;

console.log("The sum is", sum);

--the above code is not reusable. i.e if we want to add the two numbers once again, we need to write the same logic again and again.

--but using function we can make the above logic reusable:

example

//defining a function
function addition()
{

	let num1 = 10;
	let num2 = 20;

	let sum = num1+num2;

	console.log("The sum is", sum);

}


//calling the above function two times

addition();
addition();


example2: Write a function to print the "Welcome User".

//function defination
function greet()
{ //5min
	console.log("Welcome User");
}


//calling the above function
greet();


console.log("Hi");
greet();
console.log("Hello");
greet();
greet();
console.log("Bye");


Q/- Writing a function to print 1 to 10;

//function defination
function doPrinting1To10()
{

	for(let i=1;i<=10;i++)
	{
		console.log(i);
	}

}

//calling the above function
doPrinting1To10();


Local and global variable:
===========================


Note: inside a function, if we create any variable using let keyword that variable will become the local variable of that function. and we can not use that variable outside of that function.

--The variable, which we define outside of that function,will become the global variable,and we can use that variable anywhere, i.e inside that function or outside of that function as well.



example:


let name = "Sage university";

function greet()
{
let message = "Welcome";
console.log(name); //accessing global variable inside the function
console.log(message);//accessing local variable inside the function
}




console.log(name); //valid
//console.log(message); //Invalid


function doSomething()
{
let x = 20;
console.log(x); //accessing global variable inside the function
//console.log(message);//Invalid
console.log(name); //valid
console.log(x);
}

//calling the function
greet();
doSomething();




function with parameters:
========================

In a function the values on which operation is to be applied is written inside the function that makes it less useful because for every other values we have to make changes in the function itself.

to overcome this problem, we have to provide value to the function from outside i.e. the place where function is called. and to hold those values we need to define the parameters inside the function.


example: function without parameter:

//function defination
function doAddition()
{

let num1 = 10;
let num2 = 20;

let result = num1 + num2;
console.log("The Result is:",result);

}


//function call
doAddition();


example: function with parameter

//function defination
function doAddition(n1,n2)
{

console.log("n1 value is:",n1);
console.log("n2 value is:",n2);

let result = n1+n2;
console.log("The Result is:",result);

}


//function call
doAddition(10,20);
doAddition(50,40);
doAddition(100,400);
doAddition(); // NaN (undefined+undefined) = NaN




--inside the function defination, n1 and n2 is called as parameters and while calling supplied values 10, 20 is called as an argument.


Note: parameters defined inside the function, will act as a local variable to that function.




Q/- Write a function which takes a username as a parameter and print the greeting message to the that user.


Q/- Write a function which takes username and password as a parameter and show the authentication message to the user.

if username is "Admin" and password is "12345" then it should print "Welcome Admin" otherwise show the "Invalid Username or password".


function doAuthentication(username,password)
{


	if(username === "Admin" && password === "12345")
	{
		console.log("Welcome Admin");
	}
	else
	{
		console.log("Invalid Username or Password");
	}

}

doAuthentication("abc","123");
doAuthentication("Admin","12345");





Q/- Write a function to take a number from the parameter and print its factorial.


function factorial(n) 
{
 
  let fact = 1;

  for(let i = 1; i <= n; i++){
    fact = fact * i;
  }
  
console.log("The Result is:"+fact); //The Result is:55
console.log("The Result is:",fact); //The Result is: 55
console.log(`The Result is ${fact}`); //String template literal
}  
 

factorial(5);
factorial(8);


Q/- Write a function to take String as a parameter and print the reverse of that string.

"Welcome"


function reverseString(str)
{

	let bag="";

	for(let i=str.length-1; i>=0;i--)
	{
		bag = bag+str[i];
	}

	console.log(bag);

}


//calling the function 
reverseString("Welcome");



Q/- Write a function which takes 3 number as a parameter and print maximum number.















function findMaximum(n1,n2,n3)
{

	if(n1 > n2 && n1 > n3)
	{
		console.log("The Maximum is:",n1);
	}
	else if(n2 > n1 && n2 > n3)
	{
		console.log("The Maximum is:",n2);
	}
	else if(n3 > n1 && n3 > n2)
	{
		console.log("The Maximum is:",n3);
	}
	else
	{
		console.log("All numbers are equal");
	}
}


findMaximum(10,2,5); //10
findMaximum(10,12,5); // 12
findMaximum(10,2,15);//15
findMaximum(10,10,10); //All numbers are equal



Q/- write a function to take a number as a paramete and print the sum from 1 till that number:










function findSum(number)
{

	let sum =0;

	for(let i=1;i<=number;i++)
	{
		sum = sum+i;
	}

	console.log("The Sum is",sum);

}


findSum(10);
findSum(20);


Q/- Write a function which takes an year as a parameter and print whether it is leap year or not?



function leapYear(year)
{

	if((year % 4 === 0 && year % 100 !==0) || year % 400 ===0)
	{
		console.log(year,"is leap year");
	}
	else
	{
		console.log(year,"is not a leap year");
	}
}


leapYear(2015);
leapYear(2020);
leapYear(2020);
leapYear(1900);




Q/- Write a function which takes an numbers array as a parameter and print all the elements one by one from that array.











function printArray(arr)
{

	for(let i=0;i<arr.length;i++)
	{
		console.log(arr[i]);
	}

} 


let numbers = [20,50,60,80,65];

//calling the function
printArray(numbers);


printArray([80,60,90,70,50]);


example 2:


function printSomething(n)
{
console.log(n);
}


printSomething(5);

let num = 10;

printSometing(num);








Q/- Write a function which takes an numbers array as a parameter and print the sum of all the elements from that array.


Q/- Write a function which takes an numbers array as a parameter and print the maximum and minimum numbers from that array.








function doAddition(num1,num2){


let result = num1+num2;

//console.log("The Result is: "+result);

return result;

}


let i= doAddition(10,20);

if(i > 60){
console.log("Pass");
}else{
console.log("Fail");
}


function with return type:
==========================


--A function can return a value to the caller also.
--returned value could be of any type (number, string, boolean, array, object, another function).
--When a function reaches to the return statement, the function will stop executing.
--if a function return any value, then the caller can hold that value inside any variable for furthur operation on that value.


example: Write a function which takes two numbers as a parameter and return the addition of those numbers.





function doAddition(n1,n2)
{

	let result = n1+n2;
	return result; // after this line function will stop the 			//execution
	


}


//calling the function

doAddition(20,30); // here if we do not hold the returned value, then that value will be lost.


let x=doAddition(20,30); //holding/catching the return value.

console.log("The Result is:",x);


Q/- write a function which takes a number and return the factorial of that number.


function findFactorial(number)
{

	console.log("Finding the factorial starts..");

	let fact=1;

	for(let i=1;i<=number;i++)
	{
		fact = fact*i;
	}

	

	console.log("Factorial is calculated..");
	return fact;


}


//calling the function
findFactorial(5); // here we loose the returned value

let result = findFactorial(8);

console.log(`The factorial of 8 is ${result}`);




Q/- write a function which takes username and password as a parameter and return the authentication message.
--if the username is "Admin" and password is "12345" it should return "Welcome Admin" message otherwise it should return "Invalid Username or Password" message;
--print the returned message in uppercase.




function doAuthentication(username,password)
{

	if(username === "Admin" && password === "12345")
	{
		return "Welcome Admin";
	}
	else
	{
		return "Invalid Username or Password";
	}


}


doAuthentication("Admin","12345"); // here we loose the returned value

let message = doAuthentication("Admin","12345"); //holding the return value

//furthur processing
console.log(message.toUpperCase());


Q/- Write a function which takes a numbers array and return the sum of all the elements of that array, and then check whether the sum is odd number or even number.

function getResult(arr){

let sum = 0;

for(let i=0;i<arr.length;i++){
sum = sum+arr[i];
}

return sum;

}

let numbers = [10,20,30,40];

let result = getResult(numbers);

if(result % 2 === 0)
{
console.log("Even");
}
else
{
console.log("Odd");
}




Q/- write a function which takes a String as a parameter and return all the vowel charecter present inside that string in the form of an array


function getVowelArray(str)
{

	let arr = [];

	for(let i=0;i<str.length;i++)
	{

		if("aeiouAEIOU".includes(str[i]))
		{
			arr.push(str[i]);
		}

	}

	return arr;
}


//calling the function
getVowelArray("Welcome"); //here we loose the returned value


let result = getVowelArray("Welcome"); 
console.log(result);

console.log(getVowelArray("Sage University"));


function doAddition(n1,n2){

//let result = n1+n2;

//return result;

return n1+n2;


}

let x= doAddtion(10,20);
console.log(x);

console.log(doAddtion(10,20));








Q/- Write a function to validate a username:
--username length should be minimum 8 charecter length.










function validateUsername(username)
{

	if(username.length >=8)
	{
		return true;
	}
	else
	{
		return false;
	}

}

//or


function validateUsername(username)
{

	let isValid = false;

	if(username.length >=8)
	{
		isValid = true;
	}

	return isValid;
}

//or


function validateUsername(username)
{


	let isValid = username.length >=8 ? true: false;
	

	return isValid;
}


//or


function validateUsername(username)
{

	return username.length >=8 ? true: false;
	
}


//or

function validateUsername(username)
{

	return username.length >=8;
	
}

//calling the function

ex1:

validateUsername("abcd"); // will loose the return value

ex2:

let result = validateUsername("abcd1234");

if(result)
{
console.log("Username is valid");
}
else
{
console.log("Username is Invalid");
}




ex3:

if(validateUsername("abcd12345"))
{
console.log("Username is valid");
}
else
{
console.log("Username is Invalid");
}






Q/- Write a function which takes a password as a parameter and validate that password:

--length should be minimum 8 charecter.
--should contain atleast one uppercase
--should contain atleast one lowercase
--should contain atleast one digit

approach1: 

function validatePassword(password){


	let result = true;

	// Check if the password has a minimum length of 8 characters
	if(password.length < 8)
	{
		result = false;
	}


	//// Check if the password contains at least one uppercase letter
	let hasUpperCase = false;
    	for (let i = 0; i < password.length; i++) 
	{
        	if (password[i] >= 'A' && password[i] <= 'Z') 
		{
            		hasUpperCase = true;
            		break;
        	}
    	}

    	if (!hasUpperCase) 
	{
        	result = false;
    	}

	// Check if the password contains at least one lowercase letter
	let hasLowerCase = false;
    	for (let i = 0; i < password.length; i++) 
	{
        	if (password[i] >= 'a' && password[i] <= 'z') 
		{
            		hasLowerCase = true;
            		break;
        	}
    	}
    
	if (!hasLowerCase) 
	{
        	result= false;
    	}

	// Check if the password contains at least one digit
	let hasDigit = false;
    	for (let i = 0; i < password.length; i++) 
	{
        	if (password[i] >= '0' && password[i] <= '9') 
		{
            		hasDigit = true;
            		break;
        	}
    	}

    	if (!hasDigit) 
	{
        	result = false;
    	}

	return result;


}


//calling the function

let password = "MyPassw0rd";

if (isValidPassword(password)) 
{
    console.log("Password is valid.");
} 
else 
{
    console.log("Password is not valid.");
}


//or

let result = isValidPassword("MyPassw0rd");

if(result)
{
    console.log("Password is valid.");
} 
else 
{
    console.log("Password is not valid.");
}




Improved code of the above application:
---------------------------------------


function validatePassword(password) 
{

	// Check if the password has a minimum length of 8 characters
    	if (password.length < 8) 
    	{
        	return false;
    	}

    	// Check if the password contains at least one uppercase letter
    	let hasUpperCase = false;
    	for (let i = 0; i < password.length; i++) 
    	{
        	if (password[i] >= 'A' && password[i] <= 'Z') 
		{
            		hasUpperCase = true;
            		break;
        	}
    	}

    	if (!hasUpperCase) 
	{
        	return false;
    	}

    	// Check if the password contains at least one lowercase letter
    	let hasLowerCase = false;
    	for (let i = 0; i < password.length; i++) 
    	{
        	if (password[i] >= 'a' && password[i] <= 'z') 
		{
            		hasLowerCase = true;
            		break;
        	}
    	}
	
    	if (!hasLowerCase) 
	{
        	return false;
    	}

    	// Check if the password contains at least one digit
    	let hasDigit = false;
    	for (let i = 0; i < password.length; i++) 
	{
        	if (password[i] >= '0' && password[i] <= '9') 
		{
            		hasDigit = true;
            		break;
        	}
    	}

	if (!hasDigit) 
	{
        	return false;
    	}



    	// If all conditions are met, the password is valid
    	return true;
}



This way, the function will return false as soon as any condition fails, and we don't need the result variable.







Java Script Object:
===================

--inside a variable we can store a simple information like:

example:

let name = "Ram";
let age = 26;
let gender = "male";
let address = "delhi";
let married = false;





--array is a data-structure using which we can store multiple values inside a variable.


example:

let details = ["Ram",26,"male","delhi",false];

--the above array will not explain about any valid information.

--inorder to get a valid information we can define another array which hold the corresponding elements information.


let info = ["name","age","gender","address","married"];


for(let i=0;i<details.length;i++)
{
	console.log(info[i]+"========"+details[i]);
}



--using the above approach the coding will become complicated.

--to hold the meaningfull information, there is another data-structure is available inside the Java-script, called an Object.

--In Java-script object, we hold the information in the form of kay-value pair.

--Java-script objects are also called as "key-value pair" or "dictionary".

dictionary:

key---value
university--- its meaning

example: if we see any realtime form page in a webpage:

--the form also will be in the form of key-value pair.

name: "Ram"
age: 26
address: "delhi"
gender: "male"
email: "ram@gmail.com"
hobbie: "coding"


Java script object syntax:
--------------------------

let x = {key: value, key: value,...};

let y = {}; //empty object

let z= []; //empty array




console.log(y);
console.log(z);


example:

let user = {name: "Ram", age: 26, address: "delhi", gender: "male", married: false};


//or

let user = {

name: "Ram",
age: 26,
address: "delhi",
gender: "male",
married: false

};


console.log(user);


--here key should not be duplicate, if we define the duplicate key, then it will override the previous value.

example:


let x= {a: 10, b: 20, c: 30, a: 40};

console.log(a); // {a: 40, b:20, c: 30};


--the value of an object can be any type like: number, string, boolean, array, null, undefined, function, another-object.


example:


let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}


console.log(user);


Note: the key of an object should always be in a string format, where double quote is optional.

example


let user = {

"roll": 101,
"name": "Ram",
"marks": 500,
"hobbies": ["coding", "playing"],
"married": false,
"salary": null,
"spouse": undefined 

}


console.log(user);
 


Q/- WAP to create an object of student with the following details and print the object.


roll, name, age, address, gender, hobbies, email, phone, smoking


 
Accessing the information from an object:
-----------------------------------------

--to access any information from an object, we have 2 ways:

1. using dot notation
2. using bracket notation

example:


let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}


//accessing the name of the user:

using dot notation:
------------------

let n = user.name;
console.log("The name of user is:",n);

//or

console.log("The name of user is:",user.name);

console.log("The age of user is:",user.age);

console.log("The Hobbies of user is:",user.hobbies);

//or

console.log("The Hobbies of user is:");

for(let i=0;i<user.hobbies.length;i++)
{
	console.log(user.hobbies[i]);
}


using bracket notation:
-----------------------


let n = user["name"]; // bracket notation
let n = user.name; // dot notation

console.log("The name of user is:", n);

//or

console.log("The name of user is:",user["name"]);

console.log("The age of user is:",user["age"]);

console.log("The Hobbies of user is:",user["hobbies"]);


//or



console.log("The Hobbies of user is:");

for(let i=0;i<user["hobbies"].length;i++)
{
	console.log(user["hobbies"][i]);
}




difference between dot and bracket notation:
---------------------------------------------

--using bracket notation we can access any values from an object by the help of any variable also.

example:

let field = "marks"; // here we can assign any key dynamically for which we need the information.

console.log(user[field]);

--but we can not use this approach using dot notation.

example:

console.log(user.field); // undefined



adding a new entry inside an existing object.
=============================================


let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}




using dot notation:
-------------------

user.age=25;
console.log(user);

using bracket notation:
-----------------------

user["email"]="ram@gmail.com";
console.log(user);



update any existing entry inside an object.
===========================================


let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}




using dot notation:
-------------------

user.salary=5000;
console.log(user);

using bracket notation:
-----------------------

user["married"]= true;
console.log(user);



delete an entry from an existing object:
========================================



let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}



using dot notation:
-------------------

delete user.spouse;
console.log(user);

using bracket notation:
-----------------------

delete user["married"];
console.log(user);



Nested Object:
===============

let user = {

roll: 100,
name: "Ramesh",
age: 25,
marks: 500,
address: {
	 city: "Indore",
	 state: "MP",
	 country: "India",
	 pin: 576576
	},
email: "ramesh@gmail.com"

};



--In Java-script an object is a key-value pair, where value can be of any type, it can be another object as well.

example:

let user = {

roll: 100,
name: "Ramesh",
age: 25,
marks: 500,
address: {
	 city: "Indore",
	 state: "MP",
	 country: "India",
	 pin: 576576
	},
email: "ramesh@gmail.com"

};



console.log(user.name);
console.log(user["name"]);


console.log(user.address);
console.log(user["address"]);

console.log(user.address.city);
console.log(user["address"]["city"]);



accessing each entries from an object:
======================================


Note: Unlike array, Java-script object does not follow index based position of entries, the entries can be in random order.

--unlike array there is no any "length" property available inside a Java-script object.

--array syntax is [] where as Java-script object syntax is {}.

 
--In order to access each entries from an Object one by one we need to make use of a special type of for-loop called: 
"for-in" loop.


example:


let user = {

roll: 101,
name: "Ram",
marks: 500,
hobbies: ["coding", "playing"],
married: false,
salary: null,
spouse: undefined 

}


for(let i in user) // here each key from the obj will be loaded inside
{		   // variable i.
	console.log(i);
}


//or

for(let i in user)
{
	console.log(i,"==========",user[i]);
}


Example:



let user = {

roll: 10,
name: "Ram",
email: "ram@gmail.com",
gender: "male",
address: {

	city: "indore",
	state: "MP",
	country: "India",
	pin: 423232

}

};



for(let i in user.address){

console.log(i,"  ",user.address[i]);


}



Note: null, undefined, 0, empty string(""),   all having a boolean value false. but an empty object({}) and empty array([]), has the true value.

example:


let x= true; // "", 0, null, undefined, {},[]

if(x){
console.log("Welcome");
}
else{
console.log("hello");
}




Q/- print the frequency of each elements inside an array:

ex:

["A","B","A","A","C","B"];

output:

A 3
B 2
C 1

hint:

let x= {};

x["A"] = 1;
x["B"] = 1;
x["A"] = 2;



console.log(x); // {A: 2, B: 1}


solution:


let arr= ["A","B","A","A","C","B"];

let obj={};

for(let i=0;i<arr.length;i++)
{

obj[arr[i]] = 1;

}


console.log(obj);


final solution:


let arr= ["A","B","A","A","C","B"];

let obj={};

for(let i=0;i<arr.length;i++)
{


if(obj[arr[i]] === undefined){

obj[arr[i]] = 1;

}
else{
obj[arr[i]] = obj[arr[i]] +1 ;

}

}


console.log(obj);




Q/- print the frequency of each elements inside an String:

example:

let str= "Masai";

output:

M 1
a 2
s 1
i 1

***************************************************************************************

Array of Objects:
=================

single student object:
---------------------

let student = {roll: 100, name: "Ram", address: "Delhi", marks: 800};

console.log(student);


5 students objects: array of 5 student object.
------------------- 



let students = [

{roll: 101, name: "Ram", address: "Delhi", marks: 800},
{roll: 102, name: "Ravi", address: "Indore", marks: 700},
{roll: 103, name: "Dinesh", address: "Bhopal", marks: 600},
{roll: 104, name: "Vinay", address: "Mumbai", marks: 820},
{roll: 105, name: "Sunil", address: "Pune", marks: 900}

];



console.log(students.length); //5
console.log(students);
console.log(students[1]); //{roll: 102, name: "Ravi", address: "Indore", marks: 700}



for(let i=0;i<students.length;i++)
{

	//getting a single student object.

	let student = students[i];

	console.log("Roll is :",student.roll);
	console.log("Name is :",student.name);
	console.log("Address is :",student.address);
	console.log("Marks is :",student.marks);

		
	console.log("============================");


}


//OR



    
for(let i=0;i<students.length;i++)
{
    
	let student = students[i];
    
        for(let k in student)
        {
            console.log(k,"  ",student[k]);
        }
        
        console.log("============================");
    
}
    
    

adding a new Student object inside the above list of Students(array of students):
================================================================================


students.push({roll: 108, name: "Manoj", address: "patna", marks: 720});

//or


let newStudent = {roll: 110, name: "Varun", address: "Bhopal", marks: 710};
students.push(newStudent);



Assignment:
-----------

Say we have following arrays:

let subjects = ["English", "Hindi", "Physics", "Chemistry", "Maths"]
let marks = [67, 76, 77, 66, 89]

create a function that accept both arrays as parameter and return an object in which element of first array are keys and elements of second array are values.

Expected output:

{
	'English': 67,
	'Hindi': 76,
	'Physics': 77,
	'Chemistry': 66,
	'Maths': 89
}

Solution:
----------


function getObject(sub, mk) {
  //Empty object
  let obj = {};

  //iterate on each element of the array
  for (let i = 0; i < sub.length; i++) {

    //adding one entry inside the object
    obj[sub[i]] = mk[i];
  }

  return obj;
}







function foo() {

  let subjects = ['English', 'Hindi', 'Physics', 'Chemistry', 'Maths']
  let marks = [67, 76, 77, 66, 89]

  let object = getObject(subjects, marks);

  console.log(object);
}

//calling the function
foo();

Output:

{'English': 67, 'Hindi': 76, 'Physics': 77, 'Chemistry': 66, 'Maths': 89}















Assignment:
------------

let names = ["Ajay", 'Chandan', 'Pravin', 'Sanjay'];
let ages = [17, 18, 19, 20];
let marks = [67, 0, 45, null];
let states = ['UP', 'MP', 'AP', 'HP'];




Create a function that converts above arrays to array of objects.


expected output:

[
	{ name: "Ajay", age: 17, marks: 67, state: "UP"},
	{ name: "Chandan", age: 18, marks: 0, state: "MP"},
	{ name: "Pravin", age: 19, marks: 45, state: "AP"},
	{ name: "Sanjay", age: 20, marks: null, state: "HP"}
]



function getObjects(names, ages, marks, states) {

  //create an empty array to contain objects
  let objArr = [];

  //Iterate over each element of the array one by one
  for (let i = 0; i < names.length; i++) 
  {
	
    //create a new empty object
    let newObj = {};

    //add key and value to the objects
    newObj.name = names[i];
    newObj.age = ages[i];
    newObj.marks = marks[i];
    newObj.state = states[i];

    //add this object to array
    objArr.push(newObj);
  }

  return objArr;
}



function getResult() 
{

  let names = ["Ajay", 'Chandan', 'Pravin', 'Sanjay'];
  let ages = [17, 18, 19, 20];
  let marks = [67, 0, 45, null];
  let states = ['UP', 'MP', 'AP', 'HP'];

  let objects = getObjects(names, ages, marks, states);
  
  console.log(objects);

}


//calling the getResult() function
getResult();



Output
[
  { name: 'Ajay', age: 17, marks: 67, state: 'UP' },
  { name: 'Chandan', age: 18, marks: 0, state: 'MP' },
  { name: 'Pravin', age: 19, marks: 45, state: 'AP' },
  { name: 'Sanjay', age: 20, marks: null, state: 'HP' }

]



Creating function for an Object:
=================================

syntax:


let obj-name = {

key: value,
key: value,
function-name: function(parameter-list)
		{
			// body of the function
		},

key: value


};





--here function-name will be one of the key of the object.

example:


let student = {

name: "Ramesh",
age: 25,
address: "delhi",
display: function(){

		console.log("Welcome, this is the display function");
	},
smoking: false
};


console.log(student);
console.log(student.name);
student.display(); // calling the display function.


Note: if a function is defined inside an object, it is called as a method of that object.

--we can define any number of local variables inside the function of an object. and we can access the local variables inside that function directly.

--but inorder to access the properties of object inside the function of that object, we need to make use of 'this' keyword.

--'this' keyword represents the current object.

example:


let student = {

name: "Ramesh",  // object variable or instance variable
age: 25,              
address: "delhi",  
display: function(){
	
		let x=20; //local variables
		let y=30; //local variables
		console.log("Welcome, this is the display function");
		console.log("The value of x and y is ",x,y); //local variables are accessable directly
		//console.log("The value of name and age is ",name,age); //object or instance variables are not accessable
									 //directly

		console.log("The value of name and age is ",this.name,this.age);
		

	},
smoking: false
};



student.display();



example2:
---------

let student = {

name: 'Anuj',
age: 20,
display: function(){
	//console.log("Name: " + name + " Age: " + age); Error
	console.log("Name: " + this.name + " Age: " + this.age);
	}
}

student.display();



Output

Name: Anuj Age: 20





Note: Data present inside an object is called the state of that object, and functions/methods presents inside the object is called behaviour of that object.







example3:



let song = {


title: "Wande Mataram",
artist: "Lata",

play: function()
	{
	console.log(this.artist+" is Singing :"+this.title);
	}

};


song.play();

song.title = "Jai Ho";
song.artist = "Sukhwindar";

song.play();





example4:
----------


let simpleInterest = {
  
principleAmount: 1000,
interestRate: 8.0,
timePeriod: 2.0,
  
calculate: function(panelty) 
           {
              let si = (this.principleAmount * this.interestRate * this.timePeriod / 100) + panelty;
              console.log("Simple interest amount with panelty is " + si);
           }
}





simpleInterest.calculate(0);
simpleInterest.calculate(10);

Output

Simple interest amount with panelty is 160
Simple interest amount with panelty is 170


simplateInterest.principleAmount = 2000;
simpleInterest.calculate(10);







Assignment:
-----------

Create an object student
first key: name
second key: age
third key: marksheet (its an object that has marks of 3 subjects english, hindi & math)
add a method to the object that print following output
The average marks of <name> whose age is <age> is: <average marks>



Solution:
---------

 

let student = {

name: "ABC",
age: 19,

marksheet: {
             english: 43,
             hindi: 44,
             math: 45
            },

average: function() 
         {
            let sum = this.marksheet.english + this.marksheet.hindi + this.marksheet.math;
            let avg = sum / 3;
          //console.log("The average marks of " + this.name + " whose age is " + this.age + " is " + avg);
            console.log(`The average marks of ${this.name} whose age is ${this.age} is ${avg}`);
          }


}




student.average();




Q/- write an object with the following properties:

name
age
email
mobile
hobbies: 3 hobbie

--define a function inside this object which print all the details..







Assignment:
-----------

Create an object that contains product details: name, price(in INR), discount(in %), gst(in %)
create a function that is to return selling price of the product

Solution:
---------


let product = {

name: "PQR",
price: 800,
discount: 10,
gst: 2.5,

calculate: function(){
		let sellingPrice = this.price + (this.gst * this.price / 100) - (this.discount * this.price / 100);
		return sellingPrice;
	     }
}

let sp = product.calculate();
console.log("the selling price is " + sp);


//or

console.log("the selling price is " + product.calculate());


Output:
the selling price is 740





*********************************************









Assignment: create an Account object with the following properties:

accountNo, name, balance

and with following 2 functionalities:

withdraw, checkBalance



let account = {


accountNo: 43232,
name: "Ramesh",
balance: 50000,

withdraw: function(amount){
		
		if(amount <= this.balance)
		{
			this.balance = this.balance - amount;
			console.log("Amount withdwran: please collect the cash", amount);
		}
		else
		{
			console.log("Insufficient balance");
		}

	  },

checkBalance: function(){

			console.log("Your Balance is:",this.balance);
		}

}





//calling the function:

//account.withdraw(80000); //Insufficient balance


account.withdraw(40000);

account.checkBalance();




Task: Add deposit functionality to the above object.



Assignment2:
-----------
WAP to create a collage object haiving an empty list of students, define a functionality inside this object which should be able to take roll, name, address and marks as a parameter, using these parameter create a student object and add that object inside the list of students.

--print the list of students.



 
var collage = {


students: [],

addStudent: function(r, n, a, m){

		let student= {};//empty object

		student.roll = r;
		student.name = n;
		student.address = a;
		student.marks=m;

		this.students.push(student);

	},

print: function(){

		for(let i=0;i<this.students.length;i++)
		{
			let student =  this.students[i];

			console.log("Roll is: ",student.roll);
			console.log("Name is: ",student.name);
			console.log("Address is: ",student.address);
			console.log("Marks is: ",student.marks);
			consoe.log("=======================");

		}		

	}


}



console.log(collage.students);// []

collage.addStudent(100,"Dinesh","Indore",500);
collage.addStudent(101,"Sumit","Pune",520);
collage.addStudent(102,"Manoj","Mumbai",600);
collage.addStudent(103,"Mukesh","Delhi",700);


console.log(collage.students);



Q/- add a function inside the above collage object to print each student details in descriptive manner:

like:

Roll is 100
Name is Dinesh
Address is Indore
Marks is 500
================
Roll is 101
Name is Sumit
Address is Pune
Marks is 520
==============
--
--






Assignment3:
-----------


Create an array of five objects such that each object contains information about the product that has properties like name, price, rating. 

now perform following action:

1. Add new product to array
2. find the average price of the array; using function
3. Print product details that has minimum & maximum price & add remark to them as "price touches on the lowest or the highest"; using function
4. Reduce price of all products by 10% whose rating is below 3 & add remark to each product "Best price"; using function
5. Delete all products whose rating is between 0.0 and 2.9; using function




let products = [

    {name: "ABC", price: 4500, rating: 4.5},
    {name: "PQR", price: 1300, rating: 5.0},
    {name: "XYZ", price: 2300, rating: 4.0},
    {name: "PYT", price: 3000, rating: 3.5},
    {name: "LMN", price: 6700, rating: 2.5}

  ];




//function to add new product
function addNewProduct(product)
{

	products.push(product);
        console.log("New Product is addedd");
}


//addNewProduct({name: "TYU", price: 2398, rating: 3.0});

let newProduct = {name: "TYU", price: 2398, rating: 3.0};
addNewProduct(newProduct);




console.log(products);



//function to return the avg price of all the products

function averagePrice(prs){

  //code to computer average price

  var sum = 0;

  for(let i = 0; i < prs.length; i++)
  {
    sum = sum + prs[i].price;
  }

  let avg = sum/prs.length;
  return avg;

  //return sum/prs.length;
  

}


let avgPrice=  averagePrice(products);
console.log("The Average price of all the products is:",avgPrice);







//function to get min and max price product

function minMaxPrice(prs){

  //code to find product with minimum price and add remark

  let minPriceProduct = prs[0];
  let maxPriceProduct = prs[0];

  for(let i = 1; i < products.length; i++)
  {
  
    if(minPriceProduct.price > products[i].price)
    {
      minPriceProduct = products[i];
    }

    if(maxPriceProduct.price < products[i].price)
    {
      maxPriceProduct = products[i];
    }

  }


  //adding remark propertry to the object  
  minPriceProduct.remark = "price touches on the lowest price";
  maxPriceProduct.remark = "price touches on the highest price";


   let productList = [];
   productList.push(minPriceProduct);
   productList.push(maxPriceProduct);


   return productList;

}


let result = minMaxPrice(products);

console.log(result);


// function to reduce the price of all the product whose rating is less than 3.0

function reducePrice(products)
{

  for(let i = 0; i < products.length; i++)
  {
    if(products[i].rating < 3.0)
    {
      products[i].price = products[i].price * 0.9;
      products[i].remark = "Best Price";
    }
  }
}


//calling the function
reducePrice(products);

console.log(products);








