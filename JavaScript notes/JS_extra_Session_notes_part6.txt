1. once a function execution is completed all the local variables defined or created inside that function will be destroyed automatically.

2. variables of the outer function will be available to the inner function due to the lexical scoping.

3. a function can return any other function also. i.e HOF








Scope in JavaScript
====================


--Scope in JavaScript determines the accessibility or visibility of variables, functions, and objects. JavaScript has different types of scope that control where and how variables are accessible.


Types of Scope:
----------------


1. Global Scope
2. Function Scope
3. Block Scope
4. Lexical Scope


Example: index.js

// Global scope
var t=10;


function abc(){
    // Function scope
    var q=90;
   
    { //this block can be if-else, loop, switch case, etc. related
        // block scope
    }
}


{
    // Block scope
}


Global Scope:
-------------

--Global Scope means that variables and functions declared outside of any function or block are available throughout the entire code.
--Global variables are accessible anywhere in the code.
--Global scope variables are declared outside of functions or blocks, at the top level.



Example: index.js


var globalVar = "I am global";

function printGlobalVar() {
    console.log(globalVar); // Accessible inside the function
}

printGlobalVar(); // Output: "I am global"
console.log(globalVar); // Output: "I am global"


Note: Declaring too many global variables can lead to unintended interactions, so it’s generally best to limit the number of global variables.




Function Scope:
----------------

--Function Scope means that variables declared inside a function are only accessible within that function. var is function-scoped, so it is only available within the function where it is defined.

--Variables declared with var, let, or const within a function are function-scoped.
--They cannot be accessed outside the function.


Example:


function greet() {
    var message = "Hello!";
    console.log(message); // Output: Hello!
}

greet();
console.log(message); // Error: message is not defined



Example 2:


// Global scope
// var t=10;
// let q=15;
// const w=90;


function abc(){
    var t=10;
    let q=15;
    const w=90;
    console.log(q,t,w)
}
abc();


console.log(q,t,w) // Error: not defined



Block Scope:
------------


--Block Scope means that variables declared inside a block { ... } (e.g., within if-else, for, while, switch, etc.) are only accessible within that block. let and const are block-scoped, but var is not.

--Variables declared with let and const are block-scoped, meaning they’re restricted to the block in which they are defined.

--Variables declared with var ignore block scope and are function-scoped or global.



if (true) {
    let blockLet = "I'm block scoped!";
    const blockConst = "I'm also block scoped!";
    console.log(blockLet); // Output: I'm block scoped!
    console.log(blockConst); // Output: I'm also block scoped!
}

console.log(blockLet); // Error: blockLet is not defined
console.log(blockConst); // Error: blockConst is not defined



Example with var in Block Scope:

if (true) {
    var blockVar = "I'm function scoped, not block scoped!";
}

console.log(blockVar); // Output: I'm function scoped, not block scoped!





Lexical Scope:
---------------



--Lexical Scope (also known as Static Scope) refers to the fact that the scope of variables is determined by their location within the source code (i.e., where it is defined in relation to other blocks of code).

--In simple terms, a variable's scope is determined by its location in the source code and the surrounding functions or blocks of code.


--Inner functions can access variables from their outer functions due to lexical scoping. 

-- The Lexical scope concept is crucial for closures in JavaScript.



function outerFunction() {

    let outerVariable = "I am from outer scope";

    function innerFunction() {
        console.log(outerVariable); // Output: I am from outer scope
    }

    innerFunction();
}


outerFunction();


Example with Multiple Levels of Lexical Scope:

function firstLevel() {
    let levelOne = "Level 1";

    function secondLevel() {
        let levelTwo = "Level 2";

        function thirdLevel() {
            console.log(levelOne); // Output: Level 1
            console.log(levelTwo); // Output: Level 2
        }

        thirdLevel();
    }

    secondLevel();
}


firstLevel();





Closures and Lexical Scope:
----------------------------


--A closure is a function that "remembers" and can access variables from the outer function’s scope even after the outer function has finished executing. This is a powerful feature of JavaScript and is closely related to lexical scoping.

Closures are a fundamental concept in JavaScript that take advantage of lexical scoping. A closure allows a function to retain access to variables from its lexical environment, even if the function is called outside of that environment.



Example: index.js 



function makeCounter() {
    let count = 0;

    return function() {
        count += 1;
        console.log(count);
    };
}

const counter = makeCounter();
counter(); // Output: 1
counter(); // Output: 2

Explanation: makeCounter returns a function that has access to count even after makeCounter has finished executing, thanks to closures and lexical scope.




Key Points About Closures:
--------------------------


1. Encapsulation of Variables: Closures help in keeping certain data private. Variables defined in an outer function are not directly accessible from the outside, but a closure allows the inner function to access them.

2. Inner Function Accesses Outer Variables: The inner function can access variables from the outer function, even after the outer function has finished executing.

3. Preserves the Lexical Scope: Closures "remember" the environment in which they were created. This means they have access to variables from the scope in which they were defined, not where they are executed.

4. Useful in Asynchronous Programming: Closures are commonly used with asynchronous functions (like setTimeout, fetch, or event listeners) where inner functions maintain access to outer variables even after the outer function has completed.




Example: Closures and Private Data


One of the most common uses of closures is to simulate private variables (data encapsulation). By using closures, you can hide data from the global scope and only expose it through specific functions.


function counter() {
    let count = 0;
    
    return {  //returning an object
        increment: function() {
            count++;
            console.log(count);
        },
        decrement: function() {
            count--;
            console.log(count);
        },
        getCount: function() {
            return count;
        }
    };
}

let myCounterObj = counter();
myCounterObj.increment(); // Outputs: 1
myCounterObj.increment(); // Outputs: 2
console.log(myCounterObj.getCount()); // Outputs: 2
myCounterObj.decrement(); // Outputs: 1






Hoisting in JavaScript:


--Hoisting is a JavaScript mechanism that moves variable and function declarations to the top of their scope before code execution. This allows functions and variables to be used before they are declared in the code.


1. What Gets Hoisted ?

--Declarations are hoisted, not initializations (i.e., assignments).
--JavaScript only hoists function declarations and variable declarations (var, let, const).

2. How Hoisting Works with Different Variable Types:

--var Variables: var declarations are hoisted to the top of their scope (function or global scope) and initialized with undefined.

--let and const Variables: let and const are hoisted but are placed in a Temporal Dead Zone (TDZ), where they cannot be accessed until the actual line of code where they are declared. Trying to use them before their declaration results in a ReferenceError.


3. Hoisting with Functions:

--Function Declarations are fully hoisted, meaning you can call a function before it is declared in the code.
--Function Expressions (where a function is assigned to a variable) follow the same hoisting rules as variables. Only the variable itself is hoisted, not the function assignment.


4. Why Hoisting in JavaScript:

--To use the function even before its declaration.

--var hoisting is just a byproduct of the hoisting concept.



Example:

sayHello(); // Works fine, Output: Hello!


function sayHello() {
    console.log("Hello!");
}
sayHello(); // Error: sayHello is not a function


const sayHello = function() {
    console.log("Hello!");
};





Variable Hoisting with var:
---------------------------

console.log(greeting); // Output: undefined (hoisted but uninitialized)
var greeting = "Hello, world!";
console.log(greeting); // Output: Hello, world!


Variable Hoisting with let and const:
--------------------------------------
console.log(age); // ReferenceError: Cannot access 'age' before initialization
let age = 25;
console.log(age); // Output: 25



Example1 :


for(var i=1;i<=5;i++){
	console.log("Hello",i);
}

console.log("i value is",i);


Example2:

for(let i=1;i<=5;i++){
	console.log("Hello",i);
}

console.log("i value is",i); //Error








Execution Context:
==================


--JavaScript execution context is a fundamental concept that helps in understanding how JavaScript code is executed. 
--It refers to the environment in which JavaScript code is executed, including the variables, functions, and scope chains available during the execution of a piece of code.

--All code in JavaScript is executed inside an Execution Context.


Types of Execution Context:
--------------------------


1. Global Execution Context:

--It is the default execution context in JavaScript.
--It's created when the script is executed and remains until the script finishes.
--Contains global variables and functions accessible throughout the script.
--Any code outside a function is in the Global scope.


2. Function Execution Context:

--Created every time a function is invoked.
--Each function call creates a new execution context, forming a stack (the "call stack").
--each function execution context is pushed onto the execution stack (also known as the call stack). When the function finishes, its execution context is popped off the stack.
--Contains local variables, parameters, and a reference to its outer lexical environment (scope chain).



Components of Execution Context:
---------------------------------

1. Variable Environment:

--It contains the variables defined within the context, including function arguments and local variables.
--It's where variable declarations are stored, 
  --var related variables are hoisted to the top and initialized with the value undefined.
  --let and const related variables are hoisted but not initialized, and they exist in the temporal dead zone (TDZ) until their declaration is encountered in the execution phase.


2. Lexical Environment:

--Defines the accessibility of variables based on their location within nested scopes.
--It maintains a reference to the outer lexical environment, forming the scope chain, which determines variable visibility.




Execution Context Lifecycle:
-----------------------------

--JavaScript is a two-pass system. 


1. Creation Phase:

--In this phase The syntax/grammar of the code is parsed line by line and validated.
--Hoisting: Variable and function declarations are hoisted to the top of their respective environments.
 
2. Execution Phase:
	
--Code real execution begins line by line.
--Variables are assigned with their values.
--Function expressions and arrow functions are assigned to variables.
--Execution of the function body.



Execution Context Stack (Call Stack):
-------------------------------------

--JavaScript uses a call stack to manage execution contexts. When a function is invoked, a new execution context is created and pushed onto the stack. 
--When the function execution completes, its execution context is popped off the stack. 
--The call stack ensures that functions are executed in the correct order.





Example:


        console.log(age);


        var age = 20;


        let x= 50;


        fun1();


        function fun1() {

            console.log(y);
           
            var y =100; // variable created inside the function scope
            let z= 20; // variable created inside the function scope


            console.log(y);
            console.log(z);
            console.log(x); //accessing lexical environment variable
            console.log(age);//accessing lexical environment variable
       
        }




//In the creation phase the variable and the functions will be hoisted on the top,
//var related variable will be initialized with undefined where as let related //variable will not be initialized with any value.




        // ----creation phase--hoisting--------




        // var age= undefined;
        // let x;
        // function fun1(){function body will be loaded into the memory}
       
        //----execution phase---
       
        //console.log(age); //undefined
        // age = 20; //age will be initialized with its real value
        // x= 50; // x will be initialized with its real value
        //fun1(); // here fun1 will be called and control moves inside fun1 execution context.       





Example2: 



        // Global execution context
        var globalVar = 'Global'; // Variable in global scope


        function outerFunction() {
            // Function execution context
            var outerVar = 'Outer'; // Variable in outerFunction scope


            function innerFunction() {
                // Function execution context inside outerFunction
                var innerVar = 'Inner'; // Variable in innerFunction scope
                console.log(globalVar); // Accessible (global scope)
                console.log(outerVar); // Accessible (outerFunction scope)
                console.log(innerVar); // Accessible (innerFunction scope)
            }


            innerFunction(); // Invoking innerFunction
        }


        outerFunction(); // Invoking outerFunction







window object:
==============

--The window object in JavaScript is a global object representing the browser window or tab where the JavaScript code is running. 

--It serves as the top-level scope for all JavaScript code within a web page. Here are some key points about the window object:


1. Global Scope: All global variables, functions, and objects are properties of the window object. For example, window.document refers to the DOM document object, and window.alert() invokes the browser's alert dialog.

2. Properties: The window object has numerous properties representing various aspects of the browser environment. Some common properties include window.location, window.document, and window.history.


3. Methods: It also provides methods for interacting with the browser environment. For example, window.alert(), window.confirm(), and window.prompt() are used for displaying dialog boxes.


4. Event Handling: The window object handles global events such as page loading (load event), resizing (resize event), and closing (unload event). Event listeners can be attached to the window object to handle these events.

a. resize: This event triggers whenever the browser window is resized.
b. scroll: The scroll event triggers when the user scrolls the page.
c. load: The load event fires when the window and all its content (including images, styles, and scripts) have finished loading.
d. beforeunload: The beforeunload event is fired when the window is about to be unloaded, which happens when the user is navigating away or closing the window. You can use this event to prompt the user with a confirmation message.

e. focus: These events are triggered when the window gains focus.
f. blur: These events are triggered when the window loses focus.


Example:



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
    <h1>Welcome to Chitkara</h1>


    <script>

        window.addEventListener("resize", function(){
            alert("hello");
        });


    </script>

</body>
</html>




5. Global Scope Pollution: Since all global variables are properties of the window object, care should be taken to avoid unintentional conflicts or pollution of the global namespace.


Note: global variable created using var keyword, normal function declaration will be attached to the window object, which may cause the Global Scope pollution. Where as variables created using let or const keyword will not attached with the window object. And it does not pollute the Global Scope. 


Example:


  <script>


        var firstName = "Rahul";
        var lastName = "Kumar";
        let age = 20;



        console.dir(window);


        console.log(window.firstName); //Rahul
        console.log(window.age); //undefined


    </script>




Note: In the browser environment the global object is "window" object, where as in Node environment the global object is "global".

example: 

console.log(global);

--The "global" object in Node environment represents the global scope, but instead of being tied to a window (as in browsers), it manages Node-specific global objects, functions, and variables.

--It doesn't have access to browser-specific objects like document or window.

--In the browser, global variables declared using var (and some global objects like alert(), document, etc.) automatically become properties of the window object.
Example: A variable declared with var is automatically a property of window 

--In Node.js, global variables declared with var are not automatically added as properties of the global object.
--You must explicitly assign global variables to global if you want them to be accessible as global properties.

Example:

var greeting = "Hello!";
console.log(global.greeting); // Outputs: undefined

global.greeting = "Hello!";
console.log(global.greeting); // Outputs: "Hello!"



